# THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY.
# data_gen_templates/rules.py
#
# Copyright (C) 2025 James Petersen <m@jamespetersen.ca>
# Licensed under MIT. See LICENSE

from typing import Tuple
from BaseClasses import CollectionState
from collections.abc import Callable, Mapping, MutableMapping
from . import Hm, items, locations, species

Rule = Callable[[CollectionState], bool]

def create_hm_badge_rule(hm: Hm, player: int) -> Rule:
    badge_item = hm.badge_item()
    if badge_item is not None:
        def hm_badge_rule(state: CollectionState) -> bool:
            return state.has(badge_item, player)
    else:
        def hm_badge_rule(state: CollectionState) -> bool:
            return True
    return hm_badge_rule

class Rules:
    exit_rules: Mapping[Tuple[str, str], Rule]
    location_rules: Mapping[str, Rule]
    common_rules: MutableMapping[str, Callable]
    
    def __init__(self, player: int, common_rules: MutableMapping[str, Callable]):
        self.player = player
        self.common_rules = common_rules
        self.common_rules.update({ hm.name.lower():self.create_hm_rule(hm, player) for hm in Hm })
        def regional_mons(n: int) -> Rule:
            mons = [f"mon_{spec}" for spec in species.regional_mons]
            def rule(state: CollectionState) -> bool:
                return state.has_from_list_unique(mons, player, n)
            return rule
        def mons(n: int) -> Rule:
            mons = [f"mon_{spec}" for spec in species.species.keys()]
            def rule(state: CollectionState) -> bool:
                return state.has_from_list_unique(mons, player, n)
            return rule
        def badges(n: int) -> Rule:
            badges = [items.items[loc.original_item].label
                for loc in locations.locations.values() if loc.type == "badge"]
            def rule(state: CollectionState) -> bool:
                return state.has_from_list_unique(badges, player, n)
            return rule
        self.common_rules["regional_mons"] = regional_mons
        self.common_rules["mons"] = mons
        self.common_rules["badges"] = badges

    def fill_rules(self):
        self.common_rules.update({
            "national_dex": lambda state : state.has("Upgradable Pok√©dex", self.player, 3),
        })
        self.exit_rules = {
            ("valor_lakefront", "lake_valor_drained"): lambda state : state.has("event_lake_explosion", self.player),
            ("valor_lakefront", "route_222"): lambda state : state.has("event_distortion_world", self.player),
            ("valor_lakefront", "lake_valor"): lambda state : state.has("event_distortion_world", self.player),
            ("verity_lakefront", "lake_verity"): lambda state : state.has("event_lake_explosion", self.player),
            ("acuity_lakefront", "lake_acuity"): lambda state : state.has("event_lake_explosion", self.player) and self.common_rules["rock_climb"](state),
            ("acuity_lakefront", "lake_acuity_low_water"): self.common_rules["rock_climb"],
            ("route_219", "route_220"): self.common_rules["surf"],
            ("route_221", "pal_park_lobby"): self.common_rules["national_dex"],
            ("jubilife_city", "route_203"): lambda state : state.has_all(["Parcel", "Coupon 1", "Coupon 2", "Coupon 3"], self.player),
            ("oreburgh_gate_1f", "oreburgh_gate_b1f"): self.common_rules["rock_smash"],
            ("route_207_south", "route_207"): lambda state : state.has("Bicycle", self.player),
            ("ravaged_path", "route_204_north"): self.common_rules["rock_smash"],
            ("floaroma_town", "route_205_south"): lambda state : state.has("Works Key", self.player) or self.common_rules["surf"](state),
            ("route_205_south", "fuego_ironworks_outside"): self.common_rules["surf"],
            ("route_205_south", "eterna_forest_outside"): self.common_rules["cut"],
            ("route_205_north", "eterna_forest_outside"): self.common_rules["cut"],
            ("eterna_forest", "old_chateau"): self.common_rules["cut"],
            ("eterna_city", "team_galactic_eterna_building_1f"): self.common_rules["cut"],
            ("mt_coronet_1f_north_room_1_left", "mt_coronet_1f_north_room_1_middle"): self.common_rules["rock_smash"],
            ("mt_coronet_1f_north_room_1_middle", "mt_coronet_1f_north_room_1_left"): lambda state : self.common_rules["rock_smash"](state) or self.common_rules["strength"](state),
            ("mt_coronet_1f_north_room_1_middle", "mt_coronet_1f_north_room_1_right"): self.common_rules["strength"],
            ("mt_coronet_1f_north_room_1_right", "mt_coronet_1f_north_room_1_middle"): self.common_rules["strength"],
            ("mt_coronet_1f_north_room_1_right", "mt_coronet_1f_north_room_1_top"): self.common_rules["strength"],
            ("mt_coronet_1f_north_room_1_top", "mt_coronet_1f_north_room_1_right"): self.common_rules["strength"],
            ("mt_coronet_1f_north_room_1_top", "mt_coronet_b1f"): self.common_rules["defog_if_opt"],
            ("mt_coronet_1f_north_room_1_bottom", "mt_coronet_1f_north_room_1_right"): self.common_rules["strength"],
            ("route_206_cycling_road_north_gate", "cycling_road"): lambda state : state.has("Bicycle", self.player),
            ("route_206_cycling_road_south_gate", "cycling_road"): lambda state : state.has("Bicycle", self.player),
            ("route_206", "route_206_upper"): self.common_rules["cut"],
            ("route_206_upper", "wayward_cave_1f"): self.common_rules["flash_if_opt"],
            ("mt_coronet_1f_south", "mt_coronet_2f_right"): lambda state : self.common_rules["rock_climb"](state) and self.common_rules["surf"](state),
            ("mt_coronet_2f_right", "mt_coronet_2f_left"): self.common_rules["strength"],
            ("route_209_lost_tower_2f", "route_209_lost_tower_3f"): self.common_rules["defog_if_opt"],
            ("maniac_tunnel", "solaceon_ruins_maniac_tunnel_room"): lambda state : state.has("event_solaceon_ruins", self.player),
            ("route_210_south", "route_210_south_upper"): lambda state : state.has("SecretPotion", self.player),
            ("route_210_south_upper", "route_210_south"): lambda state : state.has("SecretPotion", self.player),
            ("route_210_south_upper", "route_210_north"): self.common_rules["defog_if_opt"],
            ("route_210_north", "route_210_grandma_wilma_house"): self.common_rules["rock_climb"],
            ("celestic_town", "route_210_north"): self.common_rules["defog_if_opt"],
            ("galactic_hq_wo_key", "veilstone_city_galactic_warehouse"): lambda state : state.has("event_lake_acuity_meet_jupiter", self.player),
            ("veilstone_city_galactic_warehouse", "galactic_hq_wo_key"): lambda state : state.has("event_lake_acuity_meet_jupiter", self.player),
            ("veilstone_city", "galactic_hq_w_key"): lambda state : state.has("Galactic Key", self.player),
            ("route_214", "spring_path"): lambda state : state.has("event_distortion_world", self.player),
            ("sendoff_spring", "turnback_cave_entrance"): self.common_rules["defog_if_opt"],
            ("route_213", "grand_lake_route_213_northeast_house"): self.common_rules["rock_climb"],
            ("route_218", "route_218_gate_to_canalave_city"): self.common_rules["surf"],
            ("canalave_city", "fullmoon_island"): lambda state : state.has("event_beat_cynthia", self.player) and self.common_rules["national_dex"](state),
            ("mt_coronet_1f_tunnel_room", "mt_coronet_1f_tunnel_room_base"): self.common_rules["rock_climb"],
            ("mt_coronet_1f_tunnel_room_base", "mt_coronet_1f_tunnel_room"): self.common_rules["rock_climb"],
            ("mt_coronet_1f_north_room_2", "mt_coronet_b1f"): self.common_rules["defog_if_opt"],
            ("mt_coronet_outside_south", "mt_coronet_outside_north_plat"): self.common_rules["rock_climb"],
            ("mt_coronet_outside_south", "mt_coronet_outside_south_entrance"): self.common_rules["rock_climb"],
            ("mt_coronet_outside_north_plat", "mt_coronet_outside_south"): self.common_rules["rock_climb"],
            ("mt_coronet_outside_south_entrance", "mt_coronet_outside_south"): self.common_rules["rock_climb"],
            ("mt_coronet_4f_rooms_1_and_2_lower", "mt_coronet_4f_rooms_1_and_2"): self.common_rules["rock_climb"],
            ("mt_coronet_4f_rooms_1_and_2", "mt_coronet_4f_rooms_1_and_2_lower"): self.common_rules["rock_climb"],
            ("mt_coronet_2f_left", "mt_coronet_3f"): lambda state : state.has("event_galactic_hq_defeat_cyrus", self.player),
            ("snowpoint_city", "fight_area"): lambda state : state.has("event_beat_cynthia", self.player),
            ("snowpoint_city", "snowpoint_temple_1f"): lambda state : state.has("event_beat_cynthia", self.player) and self.common_rules["national_dex"](state),
            ("victory_road_1f", "victory_road_1f_room_1"): lambda state : state.has("event_beat_cynthia", self.player) and self.common_rules["national_dex"](state),
            ("route_223", "pokemon_league_south_south"): self.common_rules["surf"],
            ("pokemon_league_south_south", "pokemon_league_south"): lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state),
            ("pokemon_league_north_pokecenter_1f", "pokemon_league_elevator_to_aaron_room"): self.common_rules["badges"](8),
            ("victory_road_1f_entrance", "victory_road_2f_entrance"): self.common_rules["rock_climb"],
            ("victory_road_2f_entrance", "victory_road_2f"): lambda state : self.common_rules["rock_smash"](state) and self.common_rules["strength"](state),
            ("route_218", "route_218_land"): self.common_rules["surf"],
            ("great_marsh_3", "great_marsh_3_surf"): self.common_rules["surf"],
            ("route_225", "route_225_surf"): self.common_rules["surf"],
            ("great_marsh_4", "great_marsh_4_surf"): self.common_rules["surf"],
            ("pokemon_league_south_south", "pokemon_league_surf"): self.common_rules["surf"],
            ("pokemon_league_south", "pokemon_league_surf"): self.common_rules["surf"],
            ("pokemon_league", "pokemon_league_surf"): self.common_rules["surf"],
            ("route_224", "route_224_surf"): self.common_rules["surf"],
            ("great_marsh_1", "great_marsh_1_surf"): self.common_rules["surf"],
            ("great_marsh_5", "great_marsh_5_surf"): self.common_rules["surf"],
            ("victory_road_b1f", "victory_road_b1f_surf"): self.common_rules["surf"],
            ("great_marsh_2", "great_marsh_2_surf"): self.common_rules["surf"],
            ("route_226", "route_226_surf"): self.common_rules["surf"],
            ("route_227", "route_227_surf"): self.common_rules["surf"],
            ("route_228", "route_228_surf"): self.common_rules["surf"],
            ("route_230", "route_230_surf"): self.common_rules["surf"],
            ("celestic_town", "celestic_town_surf"): self.common_rules["surf"],
            ("victory_road_1f_room_2", "victory_road_1f_room_2_surf"): self.common_rules["surf"],
            ("route_229", "route_229_surf"): self.common_rules["surf"],
            ("resort_area", "resort_area_surf"): self.common_rules["surf"],
            ("twinleaf_town", "twinleaf_town_surf"): self.common_rules["surf"],
            ("great_marsh_6", "great_marsh_6_surf"): self.common_rules["surf"],
            ("pastoria_city", "pastoria_city_surf"): self.common_rules["surf"],
            ("iron_island", "iron_island_surf"): self.common_rules["surf"],
            ("route_213", "route_213_surf"): self.common_rules["surf"],
            ("route_219", "route_219_surf"): self.common_rules["surf"],
            ("route_221", "route_221_surf"): self.common_rules["surf"],
            ("route_212_south", "route_212_south_surf"): self.common_rules["surf"],
            ("route_212_north", "route_212_north_surf"): self.common_rules["surf"],
            ("route_208", "route_208_surf"): self.common_rules["surf"],
            ("lake_verity", "lake_verity_surf"): self.common_rules["surf"],
            ("route_220", "route_220_surf"): self.common_rules["surf"],
            ("route_209", "route_209_surf"): self.common_rules["surf"],
            ("route_204_south", "route_204_south_surf"): self.common_rules["surf"],
            ("route_210_north", "route_210_north_surf"): self.common_rules["surf"],
            ("route_218", "route_218_surf"): self.common_rules["surf"],
            ("route_222", "route_222_surf"): self.common_rules["surf"],
            ("sunyshore_city", "sunyshore_city_surf"): self.common_rules["surf"],
            ("route_223", "route_223_surf"): self.common_rules["surf"],
            ("ravaged_path", "ravaged_path_surf"): lambda state : self.common_rules["rock_smash"](state) and self.common_rules["surf"](state),
            ("route_204_north", "route_204_north_surf"): self.common_rules["surf"],
            ("canalave_city", "canalave_city_surf"): self.common_rules["surf"],
            ("route_205_south", "route_205_south_surf"): self.common_rules["surf"],
            ("valley_windworks_outside", "valley_windworks_outside_surf"): self.common_rules["surf"],
            ("fuego_ironworks_outside", "fuego_ironworks_outside_surf"): self.common_rules["surf"],
            ("route_205_north", "route_205_north_surf"): self.common_rules["surf"],
            ("eterna_city", "eterna_city_surf"): self.common_rules["surf"],
            ("route_214", "route_214_surf"): self.common_rules["surf"],
            ("sendoff_spring", "sendoff_spring_surf"): self.common_rules["surf"],
            ("mt_coronet_4f_rooms_1_and_2_lower", "mt_coronet_4f_rooms_1_and_2_surf"): self.common_rules["surf"],
            ("mt_coronet_4f_rooms_1_and_2", "mt_coronet_4f_rooms_1_and_2_surf"): self.common_rules["surf"],
            ("mt_coronet_b1f", "mt_coronet_b1f_surf"): self.common_rules["surf"],
            ("lake_acuity", "lake_acuity_surf"): self.common_rules["surf"],
            ("lake_valor", "lake_valor_surf"): self.common_rules["surf"],
            ("oreburgh_gate_b1f", "oreburgh_gate_b1f_surf"): self.common_rules["surf"],
            ("route_203", "route_203_surf"): self.common_rules["surf"],
            ("mt_coronet_1f_south", "mt_coronet_1f_south_surf"): self.common_rules["surf"],
            ("great_marsh_3", "great_marsh_3_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_225", "route_225_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_4", "great_marsh_4_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("pokemon_league_south", "pokemon_league_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("pokemon_league", "pokemon_league_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_224", "route_224_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_1", "great_marsh_1_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_5", "great_marsh_5_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("victory_road_b1f", "victory_road_b1f_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_2", "great_marsh_2_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_226", "route_226_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_227", "route_227_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_228", "route_228_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_230", "route_230_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("celestic_town", "celestic_town_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("victory_road_1f_room_2", "victory_road_1f_room_2_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_229", "route_229_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("resort_area", "resort_area_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("twinleaf_town", "twinleaf_town_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_6", "great_marsh_6_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("pastoria_city", "pastoria_city_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("iron_island", "iron_island_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_213", "route_213_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_219", "route_219_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_221", "route_221_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_212_south", "route_212_south_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_212_north", "route_212_north_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_208", "route_208_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("lake_verity", "lake_verity_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_220", "route_220_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_209", "route_209_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_204_south", "route_204_south_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_210_north", "route_210_north_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_218", "route_218_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_222", "route_222_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("sunyshore_city", "sunyshore_city_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_223", "route_223_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("ravaged_path", "ravaged_path_good_rod"): lambda state : self.common_rules["rock_smash"](state) and state.has("Good Rod", self.player),
            ("route_204_north", "route_204_north_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("canalave_city", "canalave_city_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_205_south", "route_205_south_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("valley_windworks_outside", "valley_windworks_outside_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("fuego_ironworks_outside", "fuego_ironworks_outside_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_205_north", "route_205_north_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("eterna_city", "eterna_city_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_214", "route_214_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("sendoff_spring", "sendoff_spring_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("mt_coronet_4f_rooms_1_and_2_lower", "mt_coronet_4f_rooms_1_and_2_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("mt_coronet_4f_rooms_1_and_2", "mt_coronet_4f_rooms_1_and_2_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("mt_coronet_b1f", "mt_coronet_b1f_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("lake_acuity", "lake_acuity_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("lake_valor", "lake_valor_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("oreburgh_gate_b1f", "oreburgh_gate_b1f_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("route_203", "route_203_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("mt_coronet_1f_south", "mt_coronet_1f_south_good_rod"): lambda state : state.has("Good Rod", self.player),
            ("great_marsh_3", "great_marsh_3_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_225", "route_225_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("great_marsh_4", "great_marsh_4_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("pokemon_league_south", "pokemon_league_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("pokemon_league", "pokemon_league_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_224", "route_224_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("great_marsh_1", "great_marsh_1_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("great_marsh_5", "great_marsh_5_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("victory_road_b1f", "victory_road_b1f_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("great_marsh_2", "great_marsh_2_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_226", "route_226_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_227", "route_227_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_228", "route_228_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_230", "route_230_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("celestic_town", "celestic_town_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("victory_road_1f_room_2", "victory_road_1f_room_2_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_229", "route_229_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("resort_area", "resort_area_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("twinleaf_town", "twinleaf_town_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("great_marsh_6", "great_marsh_6_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("pastoria_city", "pastoria_city_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("iron_island", "iron_island_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_213", "route_213_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_219", "route_219_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_221", "route_221_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_212_south", "route_212_south_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_212_north", "route_212_north_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_208", "route_208_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("lake_verity", "lake_verity_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_220", "route_220_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_209", "route_209_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_204_south", "route_204_south_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_210_north", "route_210_north_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_218", "route_218_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_222", "route_222_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("sunyshore_city", "sunyshore_city_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_223", "route_223_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("ravaged_path", "ravaged_path_old_rod"): lambda state : self.common_rules["rock_smash"](state) and state.has("Old Rod", self.player),
            ("route_204_north", "route_204_north_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("canalave_city", "canalave_city_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_205_south", "route_205_south_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("valley_windworks_outside", "valley_windworks_outside_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("fuego_ironworks_outside", "fuego_ironworks_outside_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_205_north", "route_205_north_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("eterna_city", "eterna_city_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_214", "route_214_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("sendoff_spring", "sendoff_spring_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("mt_coronet_4f_rooms_1_and_2_lower", "mt_coronet_4f_rooms_1_and_2_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("mt_coronet_4f_rooms_1_and_2", "mt_coronet_4f_rooms_1_and_2_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("mt_coronet_b1f", "mt_coronet_b1f_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("lake_acuity", "lake_acuity_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("lake_valor", "lake_valor_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("oreburgh_gate_b1f", "oreburgh_gate_b1f_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("route_203", "route_203_old_rod"): lambda state : state.has("Old Rod", self.player),
            ("mt_coronet_1f_south", "mt_coronet_1f_south_old_rod"): lambda state : state.has("Old Rod", self.player),
        }
        self.location_rules = {
            "Lake Verity - Overworld (TM38) 1": self.common_rules["surf"],
            "Pokemon Research Lab - National Pok√©dex (From Oak)": self.common_rules["regional_mons"](60),
            "Pokemon Research Lab - Pok√© Radar (From Rowan)": self.common_rules["regional_mons"](60),
            "Trainers' School - Town Map (From Parcel)": lambda state : state.has("Parcel", self.player),
            "Jubilife City - Coupon 1 (From Poketch Campaign Clown)": lambda state : state.has("Parcel", self.player),
            "Jubilife City - Coupon 2 (From Poketch Campaign Clown)": lambda state : state.has("Parcel", self.player),
            "Jubilife City - Coupon 3 (From Poketch Campaign Clown)": lambda state : state.has("Parcel", self.player),
            "Jubilife City - Poketch": lambda state : state.has_all(["Parcel", "Coupon 1", "Coupon 2", "Coupon 3"], self.player),
            "Jubilife City - Calculator App": lambda state : state.has_all(["Parcel", "Coupon 1", "Coupon 2", "Coupon 3"], self.player),
            "Jubilife City - Pedometer App": lambda state : state.has_all(["Parcel", "Coupon 1", "Coupon 2", "Coupon 3"], self.player),
            "Jubilife City - Party Status App": lambda state : state.has_all(["Parcel", "Coupon 1", "Coupon 2", "Coupon 3"], self.player),
            "Oreburgh Gate - Overworld (TM31)": lambda state : state.has("Bicycle", self.player) or self.common_rules["surf"](state),
            "Oreburgh Gate - Overworld (TM01)": lambda state : self.common_rules["surf"](state) and self.common_rules["strength"](state),
            "Oreburgh Gate - Overworld (Earth Plate)": lambda state : self.common_rules["surf"](state) and self.common_rules["strength"](state),
            "Oreburgh City - Heal Ball (Gift in North House)": lambda state : state.has("mon_geodude", self.player),
            "Jubilife City - Fashion Case (From Reporter after Defeating Grunts)": lambda state : state.has("event_coal_badge", self.player),
            "Route 204 - Overworld (Sea Incense)": self.common_rules["surf"],
            "Route 204 - Overworld (HP Up)": self.common_rules["surf"],
            "Ravaged Path - Overworld (TM39)": self.common_rules["rock_smash"],
            "Ravaged Path - Overworld (TM03)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["surf"](state),
            "Ravaged Path - Overworld (Luck Incense)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["surf"](state),
            "Route 204 North - TM78 (Gift)": self.common_rules["cut"],
            "Valley Windworks - Overworld (TM24)": self.common_rules["surf"],
            "Valley Windworks - Overworld (Electirizer)": self.common_rules["surf"],
            "Eterna Forest - Overworld (Ether)": self.common_rules["cut"],
            "Eterna City - Overworld (TM46)": self.common_rules["cut"],
            "Cycle Shop - Bicycle": lambda state : state.has("event_eterna_defeat_team_galactic", self.player),
            "Eterna City - Up-Grade (From Oak)": lambda state : state.has("event_met_oak_pal_park", self.player),
            "Eterna City - Exp. Share (From Rowan's Assistant)": self.common_rules["mons"](35),
            "Route 211 - Overworld (TM12)": self.common_rules["rock_smash"],
            "Mt. Coronet - Overworld (Rare Candy)": self.common_rules["rock_smash"],
            "Mt. Coronet - Overworld (TM69)": self.common_rules["strength"],
            "Wayward Cave - Overworld (TM32)": self.common_rules["rock_smash"],
            "Wayward Cave - Overworld (Revive)": self.common_rules["rock_smash"],
            "Wayward Cave - Overworld (Escape Rope)": self.common_rules["rock_smash"],
            "Wayward Cave - Overworld (TM26)": lambda state : state.has("Bicycle", self.player),
            "Wayward Cave - Overworld (Grip Claw)": lambda state : state.has("Bicycle", self.player),
            "Wayward Cave - Overworld (Max Ether)": lambda state : state.has("Bicycle", self.player),
            "Wayward Cave - Overworld (Rare Candy)": lambda state : state.has("Bicycle", self.player),
            "Route 207 - Overworld (Iron)": self.common_rules["rock_climb"],
            "Mt. Coronet - Overworld (Protein)": self.common_rules["surf"],
            "Mt. Coronet - Overworld (Dawn Stone)": self.common_rules["surf"],
            "Route 208 - Overworld (Carbos)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state),
            "Route 208 - Overworld (Ether)": self.common_rules["rock_smash"],
            "Route 209 - Overworld (TM19)": self.common_rules["surf"],
            "Route 209 - Overworld (Calcium)": lambda state : state.has("Bicycle", self.player),
            "Route 209 - Overworld (TM47)": self.common_rules["cut"],
            "Route 209 Lost Tower - Cleanse Tag (From NPC At Top)": self.common_rules["defog"],
            "Route 209 Lost Tower - Spell Tag (From NPC At Top)": self.common_rules["defog"],
            "Solaceon Town - Pok√©mon History App": self.common_rules["regional_mons"](50),
            "Solaceon Ruins - Green Shard (From NPC)": lambda state : state.has("HM05 Defog", self.player),
            "Route 210 - Overworld (TM30)": lambda state : state.has("Bicycle", self.player) and self.common_rules["rock_smash"](state),
            "Route 210 - Overworld (Wave Incense)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state),
            "Route 210 - Overworld (Zinc)": self.common_rules["rock_climb"],
            "Celestic Town Cave - HM03 (From Cynthia's Grandmother)": lambda state : state.has("Old Charm", self.player),
            "Celestic Town - Overworld (Dragon Fang)": lambda state : state.has("Old Charm", self.player),
            "Route 211 - Overworld (TM29)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["rock_climb"](state),
            "Route 215 - Overworld (Fist Plate)": self.common_rules["cut"],
            "Route 215 - Overworld (TM34)": self.common_rules["cut"],
            "Veilstone City - Overworld (Full Incense)": self.common_rules["rock_climb"],
            "Galactic HQ - Overworld (TM21)": lambda state : state.has("Galactic Key", self.player),
            "Route 214 - Overworld (Rare Candy)": self.common_rules["surf"],
            "Valor Lakefront - SecretPotion (From Cynthia)": lambda state : state.has("event_fen_badge", self.player),
            "Valor Lakefront - Overworld (TM85)": self.common_rules["rock_climb"],
            "Valor Lakefront - Overworld (Iron)": self.common_rules["rock_climb"],
            "Valor Lakefront - White Flute (After Returning Suite Key)": lambda state : state.has("Suite Key", self.player),
            "Route 213 - Hidden (Suite Key)": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Overworld (Max Revive)": self.common_rules["surf"],
            "Route 213 - Overworld (Protein)": self.common_rules["rock_climb"],
            "Route 213 - Overworld (Water Stone)": self.common_rules["surf"],
            "Route 213 - Overworld (TM05)": self.common_rules["rock_climb"],
            "Route 213 - Overworld (TM40)": self.common_rules["rock_smash"],
            "Pastoria City - Overworld (Mystic Water)": self.common_rules["surf"],
            "Route 212 - Overworld (TM84)": self.common_rules["surf"],
            "Route 212 - Overworld (Hyper Potion)": self.common_rules["cut"],
            "Route 212 - Overworld (Zinc)": self.common_rules["cut"],
            "Route 212 - Overworld (TM11)": lambda state : self.common_rules["cut"](state) or self.common_rules["surf"](state),
            "Route 212 - Overworld (Rose Incense)": self.common_rules["surf"],
            "Route 212 - Overworld (Iron)": self.common_rules["surf"],
            "Route 212 - Overworld (TM62)": lambda state : state.has("Bicycle", self.player),
            "Route 218 - Overworld (Rare Candy)": self.common_rules["surf"],
            "Route 218 - Overworld (Hyper Potion)": self.common_rules["surf"],
            "Canalave City - Overworld (TM89)": self.common_rules["surf"],
            "Iron Island - Metal Coat (From Byron)": self.common_rules["national_dex"],
            "Mt. Coronet - Overworld (Ultra Ball)": self.common_rules["rock_smash"],
            "Mt. Coronet - Overworld (Soft Sand)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["strength"](state),
            "Mt. Coronet - Overworld (Light Clay)": self.common_rules["surf"],
            "Mt. Coronet - Overworld (Max Elixir)": lambda state : self.common_rules["rock_smash"](state) or self.common_rules["surf"](state),
            "Mt. Coronet - Overworld (Revive)": self.common_rules["strength"],
            "Mt. Coronet - Overworld (Full Restore)": self.common_rules["rock_smash"],
            "Mt. Coronet - Overworld (Adamant Orb)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state),
            "Mt. Coronet - Overworld (Lustrous Orb)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state),
            "Route 216 - Overworld (TM13)": self.common_rules["rock_climb"],
            "Route 216 - Overworld (Max Potion)": self.common_rules["rock_climb"],
            "Route 216 - Overworld (HP Up)": self.common_rules["rock_climb"],
            "Route 216 - Overworld (Mental Herb)": self.common_rules["rock_climb"],
            "Route 217 - Icicle Plate (From Hiker After Sharing HM08)": lambda state : state.has("HM08 Rock Climb", self.player),
            "Acuity Lakefront - Overworld (Reaper Cloth)": self.common_rules["rock_climb"],
            "Snowpoint Temple - Overworld (Full Heal)": self.common_rules["strength"],
            "Route 222 - Overworld (Carbos)": self.common_rules["cut"],
            "Route 222 - Overworld (Quick Ball)": lambda state : self.common_rules["rock_smash"](state) or self.common_rules["surf"](state),
            "Sunyshore City - HM07 (From Jasmine)": lambda state : state.has("event_beacon_badge", self.player),
            "Pok√©tch Company - Memo Pad App": lambda state : state.has_all(["Parcel", "Coupon 3", "Coupon 1", "Coupon 2"], self.player) and self.common_rules["badges"](1)(state),
            "Pok√©tch Company - Marking Map App": lambda state : state.has_all(["Parcel", "Coupon 3", "Coupon 1", "Coupon 2"], self.player) and self.common_rules["badges"](3)(state),
            "Pok√©tch Company - Link Searcher App": lambda state : state.has_all(["Parcel", "Coupon 3", "Coupon 1", "Coupon 2"], self.player) and self.common_rules["badges"](5)(state),
            "Pok√©tch Company - Move Tester App": lambda state : state.has_all(["Parcel", "Coupon 3", "Coupon 1", "Coupon 2"], self.player) and self.common_rules["badges"](7)(state),
            "Route 223 - Overworld (TM18)": self.common_rules["surf"],
            "Route 223 - Overworld (Ultra Ball)": self.common_rules["surf"],
            "Route 223 - Overworld (Dive Ball)": self.common_rules["surf"],
            "Route 223 - Overworld (Rare Candy)": self.common_rules["surf"],
            "Victory Road - Overworld (TM71)": lambda state : state.has("Bicycle", self.player),
            "Victory Road - Overworld (Full Restore)": lambda state : state.has("Bicycle", self.player),
            "Victory Road - Overworld (Max Elixir)": lambda state : state.has("Bicycle", self.player),
            "Victory Road - Overworld (TM41)": self.common_rules["rock_climb"],
            "Great Marsh - Hidden (Leaf Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Route 225 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 225 - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 225 - Hidden (Leaf Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Route 225 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Great Marsh - Hidden (Hyper Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Nugget)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Pok√©mon League - Hidden (Sky Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Full Restore)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Big Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Pearl) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Zinc)": self.common_rules["dowsingmachine_if_opt"],
            "Route 224 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Great Marsh - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Survival Area - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Great Marsh - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Max Elixir)": self.common_rules["dowsingmachine_if_opt"],
            "Great Marsh - Hidden (Toxic Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Route 226 - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Route 226 - Hidden (TinyMushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 226 - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 226 - Hidden (PP Max)": self.common_rules["dowsingmachine_if_opt"],
            "Route 227 - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Route 227 - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Route 227 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Calcium)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Full Restore)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (PP Max)": self.common_rules["dowsingmachine_if_opt"],
            "Route 230 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 230 - Hidden (Water Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Celestic Town - Hidden (King‚Äôs Rock)": lambda state : state.has("Old Charm", self.player) and self.common_rules["dowsingmachine_if_opt"](state),
            "Victory Road - Hidden (Heart Scale) 1": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (HP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Ultra Ball) 1": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Rare Candy) 1": self.common_rules["dowsingmachine_if_opt"],
            "Victory Road - Hidden (Ultra Ball) 2": self.common_rules["dowsingmachine_if_opt"],
            "Route 229 - Hidden (Thunderstone)": self.common_rules["dowsingmachine_if_opt"],
            "Resort Area - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Twinleaf Town - Hidden (Odd Keystone)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Great Marsh - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Verity Lakefront - Hidden (TinyMushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Pastoria City - Hidden (Zinc)": self.common_rules["dowsingmachine_if_opt"],
            "Iron Island - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Iron Island - Hidden (Iron Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (HP Up)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 213 - Hidden (Big Pearl)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 213 - Hidden (Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Hyper Potion)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 213 - Hidden (Pearl) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Pearl) 2": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Big Pearl) 1": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 213 - Hidden (Heart Scale) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 213 - Hidden (Pearl) 3": self.common_rules["dowsingmachine_if_opt"],
            "Route 221 - Hidden (Hyper Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Route 221 - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 221 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 221 - Hidden (Carbos)": self.common_rules["dowsingmachine_if_opt"],
            "Route 221 - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Iron Island - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Max Ether)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 212 - Hidden (Dawn Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Full Heal)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Hyper Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Big Mushroom)": lambda state : state.has("Bicycle", self.player) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 212 - Hidden (Ultra Ball) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 212 - Hidden (Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 208 - Hidden (Star Piece)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 208 - Hidden (TinyMushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Hearthome City - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Route 228 - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Route 220 - Hidden (Big Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 219 - Hidden (Zinc)": self.common_rules["dowsingmachine_if_opt"],
            "Route 202 - Hidden (Stardust)": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Stardust)": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Great Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Super Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Grand Lake - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Solaceon Town - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Full Heal)": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Hyper Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Ultra Ball) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Honey) x3": self.common_rules["dowsingmachine_if_opt"],
            "Route 210 - Hidden (Shiny Stone)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 210 - Hidden (Meadow Plate)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Solaceon Ruins - Hidden (Fire Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Route 209 - Hidden (Great Ball) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 222 - Hidden (Full Restore)": lambda state : (self.common_rules["rock_smash"](state) or self.common_rules["surf"](state)) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 222 - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Route 222 - Hidden (TinyMushroom)": lambda state : (self.common_rules["rock_smash"](state) or self.common_rules["surf"](state)) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 222 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 222 - Hidden (Big Mushroom)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 222 - Hidden (Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 222 - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Route 222 - Hidden (Heart Scale) 1": self.common_rules["dowsingmachine_if_opt"],
            "Sunyshore City - Hidden (Carbos)": self.common_rules["dowsingmachine_if_opt"],
            "Sunyshore City - Hidden (Zap Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Route 223 - Hidden (Heart Scale)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Route 223 - Hidden (Heart Scale) 1": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Canalave City - Hidden (Big Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Route 205 - Hidden (Stardust)": self.common_rules["dowsingmachine_if_opt"],
            "Valley Windworks - Hidden (Max Elixir)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Eterna Forest - Hidden (Insect Plate)": lambda state : self.common_rules["cut"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Fuego Ironworks - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Fuego Ironworks - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Fuego Ironworks - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Fuego Ironworks - Hidden (Protein)": self.common_rules["dowsingmachine_if_opt"],
            "Eterna City - Hidden (Draco Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Eterna City - Hidden (Super Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Eterna City - Hidden (Moon Stone)": lambda state : self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Stark Mountain - Hidden (Stardust)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Iron)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Flame Plate)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Star Piece) 1": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Stark Mountain - Hidden (Fire Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Valor Lakefront - Hidden (Sun Stone)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Valor Lakefront - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 214 - Hidden (Carbos)": self.common_rules["dowsingmachine_if_opt"],
            "Route 214 - Hidden (Big Mushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 214 - Hidden (Razor Fang)": self.common_rules["dowsingmachine_if_opt"],
            "Veilstone City - Hidden (Calcium)": self.common_rules["dowsingmachine_if_opt"],
            "Veilstone City - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Veilstone City - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Old Chateau - Hidden (Honey) x3": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey) 1": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey) 2": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey) 3": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey) 4": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Hyper Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Full Heal)": self.common_rules["dowsingmachine_if_opt"],
            "Floaroma Meadow - Hidden (Honey) 5": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Razor Claw)": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Elixir)": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Pok√©mon Mansion - Hidden (Protein)": self.common_rules["dowsingmachine_if_opt"],
            "Route 206 - Hidden (Ether)": self.common_rules["dowsingmachine_if_opt"],
            "Route 206 - Hidden (TinyMushroom)": self.common_rules["dowsingmachine_if_opt"],
            "Route 207 - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Route 207 - Hidden (Pok√© Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 207 - Hidden (Great Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 207 - Hidden (Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Star Piece)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Red Shard)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Blue Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Max Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Revival Herb)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Energy Root)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Sun Stone)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Full Heal)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Heal Powder)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Yellow Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Stardust)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Stone Plate)": lambda state : self.common_rules["waterfall"](state) and self.common_rules["surf"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Stardust) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Full Restore)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Moon Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Revival Herb) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Energy Root) 1": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Pok√© Doll)": self.common_rules["dowsingmachine_if_opt"],
            "Galactic HQ - Hidden (Max Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Lake Valor - Hidden (HP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Green Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Stardust) 2": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Heal Powder) 1": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Max Potion) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Rare Candy)": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Green Shard) 1": lambda state : self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Red Shard) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Star Piece) 5": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Stardust) 3": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (EnergyPowder)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Star Piece) 6": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Rare Candy) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Blue Shard) 1": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Green Shard) 2": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Yellow Shard) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 216 - Hidden (PP Up)": self.common_rules["dowsingmachine_if_opt"],
            "Route 211 - Hidden (Calcium)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["rock_climb"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Mt. Coronet - Hidden (Nugget) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Iron)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Max Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Revival Herb)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Max Repel)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Ultra Ball) 1": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Protein)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Max Potion)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Full Heal)": self.common_rules["dowsingmachine_if_opt"],
            "Route 217 - Hidden (Nugget)": self.common_rules["dowsingmachine_if_opt"],
            "Snowpoint City - Hidden (Rare Candy)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Max Elixir)": self.common_rules["dowsingmachine_if_opt"],
            "Snowpoint Temple - Hidden (Full Restore)": self.common_rules["dowsingmachine_if_opt"],
            "Route 215 - Hidden (Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Route 215 - Hidden (Ultra Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Route 215 - Hidden (Iron)": self.common_rules["dowsingmachine_if_opt"],
            "Wayward Cave - Hidden (Yellow Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Great Ball)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Red Shard)": self.common_rules["dowsingmachine_if_opt"],
            "Wayward Cave - Hidden (Green Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Super Potion)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Blue Shard)": lambda state : self.common_rules["rock_smash"](state) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Stardust)": lambda state : state.has("Bicycle", self.player) and self.common_rules["dowsingmachine_if_opt"](state),
            "Wayward Cave - Hidden (Dusk Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Solaceon Ruins - Hidden (Water Stone)": self.common_rules["dowsingmachine_if_opt"],
            "Route 211 - Hidden (Great Ball)": self.common_rules["dowsingmachine_if_opt"],
            "Oreburgh City - Hidden (Pearl)": self.common_rules["dowsingmachine_if_opt"],
            "Oreburgh City - Hidden (Heart Scale)": self.common_rules["dowsingmachine_if_opt"],
            "Solaceon Ruins - Hidden (Thunderstone)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Full Restore) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Rare Candy) 2": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Stardust) 4": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (EnergyPowder) 1": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Revive)": self.common_rules["dowsingmachine_if_opt"],
            "Mt. Coronet - Hidden (Star Piece) 2": self.common_rules["dowsingmachine_if_opt"],
            "event_lake_explosion": lambda state : state.has_all(["HM04 Strength", "event_mine_badge"], self.player),
        }

    def create_hm_rule(self, hm: Hm, player: int) -> Rule:
        mons = set()
        item_evols = []
        for name, spec in species.species.items():
            if hm not in spec.hms:
                continue
            mons.add(f"mon_{name}")
            while spec.pre_evolution:
                new_spec = species.species[spec.pre_evolution.species]
                if hm in new_spec.hms:
                    break
                if spec.pre_evolution.item:
                    item_evols.append([f"mon_{spec.pre_evolution.species}", spec.pre_evolution.item])
                else:
                    mons.add(f"mon_{spec.pre_evolution.species}")
                spec = new_spec

        def hm_rule(state: CollectionState) -> bool:
            if not (state.has(hm, player) and self.common_rules[f"{hm.name.lower()}_badge"](state)):
                return False
            if state.has_any(mons, player):
                return True
            for item_evol in item_evols:
                if state.has_all(item_evol, player):
                    return True
            return False

        return hm_rule
