from __future__ import annotations

import functools
from typing import Any, Dict, List

from dataclasses import dataclass

from Options import OptionSet

from ..game import Game
from ..game_objective_template import GameObjectiveTemplate

from ..enums import KeymastersKeepGamePlatforms


@dataclass
class TheElderScrollsVSkyrimSpecialEditionArchipelagoOptions:
    the_elder_scrolls_v_skyrim_special_edition_dlc_owned: TheElderScrollsVSkyrimSpecialEditionDLCOwned


class TheElderScrollsVSkyrimSpecialEditionGame(Game):
    name = "The Elder Scrolls V: Skyrim - Special Edition"
    platform = KeymastersKeepGamePlatforms.PC

    platforms_other = [
        KeymastersKeepGamePlatforms.PS4,
        KeymastersKeepGamePlatforms.PS5,
        KeymastersKeepGamePlatforms.XONE,
        KeymastersKeepGamePlatforms.XSX,
    ]

    is_adult_only_or_unrated = True

    options_cls = TheElderScrollsVSkyrimSpecialEditionArchipelagoOptions

    def optional_game_constraint_templates(self) -> List[GameObjectiveTemplate]:
        return [
            GameObjectiveTemplate(
                label="Create a new RACE character.  Sex: SEX  Skill: SKILL  Armor: ARMOR  Difficulty: DIFFICULTY  Survival: SURVIVAL",
                data={
                    "RACE": (self.races, 1),
                    "SEX": (self.sexes, 1),
                    "SKILL": (self.main_skills, 1),
                    "ARMOR": (self.armor_classes, 1),
                    "DIFFICULTY": (self.difficulties, 1),
                    "SURVIVAL": (self.survival_mode, 1),
                },
            ),
        ]

    def game_objective_templates(self) -> List[GameObjectiveTemplate]:
        templates: List[GameObjectiveTemplate] = [
            GameObjectiveTemplate(
                label="Join the following Faction: FACTION",
                data={
                    "FACTION": (self.factions, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Complete the following Daedric Quest: QUEST",
                data={
                    "QUEST": (self.quests_daedric, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Complete the following Side Quest: QUEST",
                data={
                    "QUEST": (self.quests_side, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Have at least COUNT ATTRIBUTE points",
                data={
                    "COUNT": (self.attribute_range, 1),
                    "ATTRIBUTE": (self.attributes, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Reach Level LEVEL",
                data={
                    "LEVEL": (self.level_range, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Level SKILL to LEVEL",
                data={
                    "SKILL": (self.skills, 1),
                    "LEVEL": (self.skill_level_range, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Level SKILLS to LEVEL",
                data={
                    "SKILLS": (self.skills, 3),
                    "LEVEL": (self.skill_level_range, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Make the following skill Legendary: SKILL",
                data={
                    "SKILL": (self.skills, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Unlock the following perk: PERK",
                data={
                    "PERK": (self.perks, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Unlock the following perks: PERKS",
                data={
                    "PERKS": (self.perks, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Unlock COUNT perks in the SKILL tree",
                data={
                    "COUNT": (self.perk_unlock_range, 1),
                    "SKILL": (self.skills, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Harvest COUNTx RESOURCE",
                data={
                    "COUNT": (self.harvest_count_range, 1),
                    "RESOURCE": (self.harvestables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=4,
            ),
            GameObjectiveTemplate(
                label="Discover COUNT Alchemy Effects from the following ingredient: INGREDIENT",
                data={
                    "COUNT": (self.alchemy_effect_count_range, 1),
                    "INGREDIENT": (self.alchemy_ingredients, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Brew COUNT Potions (or Poisons) using the following ingredient: INGREDIENT",
                data={
                    "COUNT": (self.alchemy_brewing_count_range, 1),
                    "INGREDIENT": (self.alchemy_ingredients, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Brew COUNT Potions with the following effect: EFFECT",
                data={
                    "COUNT": (self.alchemy_brewing_count_range, 1),
                    "EFFECT": (self.alchemy_effects_potion, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Brew COUNT Poisons with the following effect: EFFECT",
                data={
                    "COUNT": (self.alchemy_brewing_count_range, 1),
                    "EFFECT": (self.alchemy_effects_poison, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Enchant an item to the following specification: SPECIFICATION",
                data={
                    "SPECIFICATION": (self.enchantment_effects, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=4,
            ),
            GameObjectiveTemplate(
                label="Learn the following Enchantment Effect through disenchantment: ENCHANTMENT",
                data={
                    "ENCHANTMENT": (self.enchantment_effects_disenchantment, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Trap the Soul of the following creature in a Soul Gem: CREATURE",
                data={
                    "CREATURE": (self.soul_trap_souls, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Enchant the following Staff: STAFF",
                data={
                    "STAFF": (self.enchanted_staves, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="At a Forge, craft COUNT items from the following category: CATEGORY",
                data={
                    "COUNT": (self.smithing_craft_count_range, 1),
                    "CATEGORY": (self.smithing_crafting_categories, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=4,
            ),
            GameObjectiveTemplate(
                label="At a Grindstone, improve a Weapon from the following category to QUALITY quality: CATEGORY",
                data={
                    "QUALITY": (self.smithing_qualities, 1),
                    "CATEGORY": (self.smithing_weapon_categories, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="At a Workbench, improve a piece of Armor from the following category to QUALITY quality: CATEGORY",
                data={
                    "QUALITY": (self.smithing_qualities, 1),
                    "CATEGORY": (self.smithing_armor_categories, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Obtain the following outcome at the Atronach Forge: OUTCOME",
                data={
                    "OUTCOME": (self.atronach_forge_outcomes, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Bake COUNTx ITEM at an Oven",
                data={
                    "COUNT": (self.baking_count_range, 1),
                    "ITEM": (self.baking_goods, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Collect COUNT of the following Baking Ingredient: INGREDIENT",
                data={
                    "COUNT": (self.baking_ingredient_count_range, 1),
                    "INGREDIENT": (self.baking_ingredients, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Fully construct the following house: HOUSE",
                data={
                    "HOUSE": (self.construtible_houses, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Construct and fully furnish the following section for HOUSE: SECTION",
                data={
                    "HOUSE": (self.construtible_houses, 1),
                    "SECTION": (self.construtible_house_features, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Cook COUNTx ITEM at a Cooking Pot",
                data={
                    "COUNT": (self.cooking_count_range, 1),
                    "ITEM": (self.cooking_foods, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Collect COUNT of the following Cooking Ingredient: INGREDIENT",
                data={
                    "COUNT": (self.cooking_ingredient_count_range, 1),
                    "INGREDIENT": (self.cooking_ingredients, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Imbue the following Spider Scroll: SCROLL",
                data={
                    "SCROLL": (self.spider_scrolls, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Mine COUNTx MINEABLE",
                data={
                    "COUNT": (self.mining_count_range, 1),
                    "MINEABLE": (self.mining_mineables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Mine all Ore Deposits from MINE",
                data={
                    "MINE": (self.mining_mines, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Smelt the following Ingot from Ore you mined yourself: INGOT",
                data={
                    "INGOT": (self.mining_ingots, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Smelt COUNTx SMELTABLE",
                data={
                    "COUNT": (self.smelting_count_range, 1),
                    "SMELTABLE": (self.smelting_smeltables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Obtain COUNTx Leather by tanning the following Hide: HIDE",
                data={
                    "COUNT": (self.tanning_count_range, 1),
                    "HIDE": (self.tanning_tannables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Hunt COUNTx HUNTABLE",
                data={
                    "COUNT": (self.hunting_count_range, 1),
                    "HUNTABLE": (self.hunting_huntables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Harvest COUNTx HARVESTABLE from animals you hunted",
                data={
                    "COUNT": (self.hunting_harvestable_count_range, 1),
                    "HARVESTABLE": (self.hunting_harvestables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Catch COUNTx Fish from the following Fishing Spot: SPOT",
                data={
                    "COUNT": (self.fishing_spot_count_range, 1),
                    "SPOT": (self.fishing_spots, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Fish COUNTx FISH",
                data={
                    "COUNT": (self.fishing_count_range, 1),
                    "FISH": (self.fishing_fish, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Adopt the following Child: CHILD",
                data={
                    "CHILD": (self.adoptable_children, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Own the following House: HOUSE",
                data={
                    "HOUSE": (self.houses, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Marry SPOUSE",
                data={
                    "SPOUSE": (self.marriable_npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Become Thane of HOLD",
                data={
                    "HOLD": (self.thane_holds, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Start a Brawl with NPC",
                data={
                    "NPC": (self.brawlable_npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Obtain the following Artifact: ARTIFACT",
                data={
                    "ARTIFACT": (self.artifacts, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Get arrested for CRIME",
                data={
                    "CRIME": (self.crimes, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Escape from the following Jail: JAIL",
                data={
                    "JAIL": (self.jails, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Accumulate a Bounty of at least VALUE Gold in the following Region: REGION",
                data={
                    "VALUE": (self.bounty_amount_range, 1),
                    "REGION": (self.bounty_regions, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Steal an item worth at least VALUE Gold and fence it to FENCE",
                data={
                    "VALUE": (self.stealing_value_range, 1),
                    "FENCE": (self.stealing_fences, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Burgle the following Location: LOCATION",
                data={
                    "LOCATION": (self.stealing_locations, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Pickpocket an item from NPC",
                data={
                    "NPC": (self.npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Murder / Takedown NPC",
                data={
                    "NPC": (self.npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Contract the following Disease: DISEASE",
                data={
                    "DISEASE": (self.diseases, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Become a vampire and feed on NPC",
                data={
                    "NPC": (self.npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Become a werewolf and attack NPC while transformed",
                data={
                    "NPC": (self.npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Become a werewolf and allocate the following perk: PERK",
                data={
                    "PERK": (self.perks_werewolf, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Become a vampire lord and attack NPC while transformed",
                data={
                    "NPC": (self.npcs, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Become a vampire lord and allocate the following perk: PERK",
                data={
                    "PERK": (self.perks_vampire_lord, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Collect a full set of TYPE Armor",
                data={
                    "TYPE": (self.armor_sets, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Collect the following Armor Pieces: ARMORS",
                data={
                    "ARMORS": (self.armor_pieces, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Obtain an enchanted version of the following armor piece: ARMOR",
                data={
                    "ARMOR": (self.armor_pieces, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Collect a full set of TYPE Weapons",
                data={
                    "TYPE": (self.weapon_sets, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Collect the following Weapons: WEAPONS",
                data={
                    "WEAPONS": (self.weapons, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Obtain an enchanted version of the following weapon: WEAPON",
                data={
                    "WEAPON": (self.weapons, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Obtain the following Books: BOOKS",
                data={
                    "BOOKS": (self.books, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Obtain and use the following Skill Book: BOOK",
                data={
                    "BOOK": (self.books_skill, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Find COUNTx CLUTTER",
                data={
                    "COUNT": (self.clutter_count_range, 1),
                    "CLUTTER": (self.clutter, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Learn and cast the following Spell: SPELL",
                data={
                    "SPELL": (self.spells, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=4,
            ),
            GameObjectiveTemplate(
                label="Obtain the following Blessing: BLESSING",
                data={
                    "BLESSING": (self.blessings, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Learn the following Word of Power: WORDS",
                data={
                    "WORDS": (self.words_of_power, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Learn and use the following Dragon Shout: SHOUT",
                data={
                    "SHOUT": (self.dragon_shouts, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Possess at least COUNT Gold",
                data={
                    "COUNT": (self.gold_count_range, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Kill the following Enemies: ENEMIES",
                data={
                    "ENEMIES": (self.enemies, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=4,
            ),
            GameObjectiveTemplate(
                label="Clear the following Locations: LOCATIONS",
                data={
                    "LOCATIONS": (self.locations_clearable, 3),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=8,
            ),
            GameObjectiveTemplate(
                label="Visit and activate the following Standing Stone: STONE",
                data={
                    "STONE": (self.standing_stones, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="ACTION MERCHANT",
                data={
                    "ACTION": (self.merchant_actions, 1),
                    "MERCHANT": (self.merchants, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Train a skill at the following Trainer: TRAINER",
                data={
                    "TRAINER": (self.trainers, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
            GameObjectiveTemplate(
                label="Obtain the following Mount: MOUNT",
                data={
                    "MOUNT": (self.mounts, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=1,
            ),
            GameObjectiveTemplate(
                label="Grow and harvest the following: GROWABLE",
                data={
                    "GROWABLE": (self.growables, 1),
                },
                is_time_consuming=False,
                is_difficult=False,
                weight=2,
            ),
        ]

        if self.has_anniversary_upgrade:
            templates.append(
                GameObjectiveTemplate(
                    label="Adopt the following Pet: PET",
                    data={
                        "PET": (self.pets, 1),
                    },
                    is_time_consuming=False,
                    is_difficult=False,
                    weight=1,
                ),
            )

        return templates

    @property
    def dlc_owned(self) -> List[str]:
        return sorted(self.archipelago_options.the_elder_scrolls_v_skyrim_special_edition_dlc_owned.value)

    @property
    def has_anniversary_upgrade(self) -> bool:
        return "Anniversary Upgrade" in self.dlc_owned

    @staticmethod
    def races() -> List[str]:
        return [
            "Argonian",
            "Breton",
            "Dark Elf",
            "High Elf",
            "Imperial",
            "Khajiit",
            "Nord",
            "Orc",
            "Redguard",
            "Wood Elf",
        ]

    @staticmethod
    def sexes() -> List[str]:
        return [
            "Female",
            "Male",
        ]

    @functools.cached_property
    def mains_skills_by_skill(self) -> Dict[str, Any]:
        return {
            "Alchemy": self.main_skills_alchemy,
            "Alteration": self.main_skills_alteration,
            "Archery": self.main_skills_archery,
            "Block": self.main_skills_block,
            "Conjuration": self.main_skills_conjuration,
            "Destruction": self.main_skills_destruction,
            "Enchanting": self.main_skills_enchanting,
            "Illusion": self.main_skills_illusion,
            "Lockpicking": self.main_skills_lockpicking,
            "One-Handed": self.main_skills_one_handed,
            "Pickpocket": self.main_skills_pickpocket,
            "Restoration": self.main_skills_restoration,
            "Smithing": self.main_skills_smithing,
            "Sneak": self.main_skills_sneak,
            "Speech": self.main_skills_speech,
            "Two-Handed": self.main_skills_two_handed,
            "Unarmed": self.main_skills_unarmed,
        }

    def main_skills(self) -> List[str]:
        skill: str = self.random.choice(list(self.mains_skills_by_skill.keys()))

        return self.mains_skills_by_skill[skill]()

    @staticmethod
    def main_skills_alchemy() -> List[str]:
        return [
            "Alchemy (Buffs)",
            "Alchemy (Poisoned Blades)",
            "Alchemy (Poisoned Projectiles)",
        ]

    @staticmethod
    def main_skills_alteration() -> List[str]:
        return [
            "Alteration (Magic Armor)",
            "Alteration (Paralysis)",
        ]

    @staticmethod
    def main_skills_archery() -> List[str]:
        return [
            "Archery (Bows)",
            "Archery (Crossbows)",
        ]

    @staticmethod
    def main_skills_block() -> List[str]:
        return [
            "Block (Shield Bash)",
        ]

    @staticmethod
    def main_skills_conjuration() -> List[str]:
        return [
            "Conjuration (Bound Weapons)",
            "Conjuration (Daedra Summons)",
            "Conjuration (Spirit Summons)",
            "Conjuration (Undead Summons)",
        ]

    @staticmethod
    def main_skills_destruction() -> List[str]:
        return [
            "Destruction (Fire)",
            "Destruction (Frost)",
            "Destruction (Shock)",
        ]

    @staticmethod
    def main_skills_enchanting() -> List[str]:
        return [
            "Enchanting (Self-Enchanted Gear)",
        ]

    @staticmethod
    def main_skills_illusion() -> List[str]:
        return [
            "Illusion (Frenzy)",
            "Illusion (Invisibility)",
        ]

    @staticmethod
    def main_skills_lockpicking() -> List[str]:
        return [
            "Lockpicking (Treasure Hunter)",
        ]

    @staticmethod
    def main_skills_one_handed() -> List[str]:
        return [
            "One-Handed (Maces)",
            "One-Handed (Swords)",
            "One-Handed (War Axes)",
        ]

    @staticmethod
    def main_skills_pickpocket() -> List[str]:
        return [
            "Pickpocket (Thief)",
        ]

    @staticmethod
    def main_skills_restoration() -> List[str]:
        return [
            "Restoration (Party Healer)",
        ]

    @staticmethod
    def main_skills_smithing() -> List[str]:
        return [
            "Smithing (Self-Crafted Gear)",
        ]

    @staticmethod
    def main_skills_sneak() -> List[str]:
        return [
            "Sneak (Dagger Attacks)",
            "Sneak (Melee Attacks)",
            "Sneak (Ranged Attacks)",
        ]

    @staticmethod
    def main_skills_speech() -> List[str]:
        return [
            "Speech (Merchant)",
        ]

    @staticmethod
    def main_skills_two_handed() -> List[str]:
        return [
            "Two-Handed (Battle Axes)",
            "Two-Handed (Greatswords)",
            "Two-Handed (Warhammers)",
        ]

    @staticmethod
    def main_skills_unarmed() -> List[str]:
        return [
            "Unarmed (Fist Weapons)",
        ]

    @staticmethod
    def armor_classes() -> List[str]:
        return [
            "Light",
            "Light",
            "Light",
            "Heavy",
            "Heavy",
            "Heavy",
            "Unarmored",
        ]

    @staticmethod
    def difficulties() -> List[str]:
        return [
            "Novice",
            "Apprentice",
            "Adept",
            "Expert",
            "Master",
            "Legendary",
        ]

    @staticmethod
    def survival_mode() -> List[str]:
        return ["Off", "Off", "Off", "On"]

    @functools.cached_property
    def factions_base(self) -> List[str]:
        return [
            "Companions",
            "College of Winterhold",
            "Thieves Guild",
            "Dark Brotherhood",
            "Imperial Legion",
            "Stormcloaks",
            "Bards College",
            "Dawnguard",
            "Volkihar Vampire Clan",
        ]

    @functools.cached_property
    def factions_anniversary(self) -> List[str]:
        return [
            "Tribunal Temple",
        ]

    def factions(self) -> List[str]:
        factions: List[str] = self.factions_base[:]

        if self.has_anniversary_upgrade:
            factions.extend(self.factions_anniversary)

        return sorted(factions)

    @staticmethod
    def quests_daedric() -> List[str]:
        return [
            "The Black Star (Azura)",
            "Boethiah's Calling (Boethiah)",
            "A Daedra's Best Friend (Clavicus Vile)",
            "Discerning the Transmundane (Hermaeus Mora)",
            "Ill Met By Moonlight (Hircine)",
            "The Cursed Tribe (Malacath)",
            "Pieces of the Past (Mehrunes Dagon)",
            "The Whispering Door (Mephala)",
            "The Break of Dawn (Meridia)",
            "The House of Horrors (Molag Bal)",
            "The Taste of Death (Namira)",
            "Darkness Returns (Nocturnal)",
            "The Only Cure (Peryite)",
            "A Night To Remember (Sanguine)",
            "The Mind of Madness (Sheogorath)",
            "Waking Nightmare (Vaermina)",
        ]

    @staticmethod
    def quests_side() -> List[str]:
        return [
            "No One Escapes Cidhna Mine (Markarth)",
            "The Forsworn Conspiracy (Markarth)",
            "The Heart of Dibella (Markarth)",
            "The Lost Expedition (Markarth)",
            "Laid to Rest (Morthal)",
            "Rising at Dawn (Morthal)",
            "A New Debt (Raven Rock)",
            "Black Book: The Winds of Change (Raven Rock)",
            "March of the Dead (Raven Rock)",
            "Served Cold (Raven Rock)",
            "The Final Descent (Raven Rock)",
            "Promises to Keep (Riften)",
            "The Book of Love (Riften)",
            "Unfathomable Depths (Riften)",
            "Lights Out! (Solitude)",
            "Tending the Flames (Solitude)",
            "The Man Who Cried Wolf (Solitude)",
            "The Wolf Queen Awakened (Solitude)",
            "In My Time Of Need (Whiterun)",
            "Missing In Action (Whiterun)",
            "The Blessings of Nature (Whiterun)",
            "Blood on the Ice (Windhelm)",
            "Repairing the Phial (Windhelm)",
            "Rise in the East (Windhelm)",
            "The White Phial (Windhelm)",
            "The Golden Claw (Riverwood)",
            "A New Source of Stalhrim (Skaal Village)",
            "Filial Bonds (Skaal Village)",
            "Lost Legacy (Skaal Village)",
            "Azra's Staffs (Tel Mithryn)",
            "Black Book: The Hidden Twilight (Tel Mithryn)",
            "Briarheart Necropsy (Tel Mithryn)",
            "Experimental Subject A (Tel Mithryn)",
            "From the Ashes (Tel Mithryn)",
            "Healing a House (Tel Mithryn)",
            "Heart Stones (Tel Mithryn)",
            "Lost Knowledge (Tel Mithryn)",
            "Old Friends (Tel Mithryn)",
            "Reluctant Steward (Tel Mithryn)",
            "Telvanni Research (Tel Mithryn)",
            "Wind and Sand (Tel Mithryn)",
            "Retaking Thirsk (Thirsk Mead Hall)",
            "The Chief of Thirsk Hall (Thirsk Mead Hall)",
        ]

    @staticmethod
    def attributes() -> List[str]:
        return [
            "Health",
            "Magicka",
            "Stamina",
        ]

    @staticmethod
    def attribute_range() -> range:
        return range(200, 501, 10)

    @staticmethod
    def level_range() -> range:
        return range(20, 81)

    @staticmethod
    def skill_level_range() -> range:
        return range(25, 91)

    @staticmethod
    def skills() -> List[str]:
        return [
            "Alteration",
            "Archery",
            "Alchemy",
            "Conjuration",
            "Block",
            "Light Armor",
            "Destruction",
            "Heavy Armor",
            "Lockpicking",
            "Enchanting",
            "One-Handed",
            "Pickpocket",
            "Illusion",
            "Smithing",
            "Sneak",
            "Restoration",
            "Two-Handed",
            "Speech",
        ]

    @staticmethod
    def perk_unlock_range() -> range:
        return range(3, 7)

    @staticmethod
    def perks() -> List[str]:
        return [
            "Novice Alteration (Alteration)",
            "Alteration Dual Casting (Alteration)",
            "Apprentice Alteration (Alteration)",
            "Magic Resistance (Alteration)",
            "Adept Alteration (Alteration)",
            "Expert Alteration (Alteration)",
            "Atronach (Alteration)",
            "Master Alteration (Alteration)",
            "Stability (Alteration)",
            "Mage Armor (Alteration)",
            "Overdraw (Archery)",
            "Critical Shot (Archery)",
            "Hunter's Discipline (Archery)",
            "Ranger (Archery)",
            "Eagle Eye (Archery)",
            "Power Shot (Archery)",
            "Quick Shot (Archery)",
            "Steady Hand (Archery)",
            "Bullseye (Archery)",
            "Alchemist (Alchemy)",
            "Physician (Alchemy)",
            "Benefactor (Alchemy)",
            "Experimenter (Alchemy)",
            "Poisoner (Alchemy)",
            "Concentrated Poison (Alchemy)",
            "Green Thumb (Alchemy)",
            "Snakeblood (Alchemy)",
            "Purity (Alchemy)",
            "Novice Conjuration (Conjuration)",
            "Apprentice Conjuration (Conjuration)",
            "Adept Conjuration (Conjuration)",
            "Expert Conjuration (Conjuration)",
            "Master Conjuration (Conjuration)",
            "Conjuration Dual Casting (Conjuration)",
            "Mystic Binding (Conjuration)",
            "Soul Stealer (Conjuration)",
            "Oblivion Binding (Conjuration)",
            "Necromancy (Conjuration)",
            "Dark Souls (Conjuration)",
            "Summoner (Conjuration)",
            "Atromancy (Conjuration)",
            "Elemental Potency (Conjuration)",
            "Twin Souls (Conjuration)",
            "Shield Wall (Block)",
            "Deflect Arrows (Block)",
            "Elemental Protection (Block)",
            "Block Runner (Block)",
            "Power Bash (Block)",
            "Deadly Bash (Block)",
            "Disarming Bash (Block)",
            "Shield Charge (Block)",
            "Quick Reflexes (Block)",
            "Agile Defender (Light Armor)",
            "Custom Fit (Light Armor)",
            "Matching Set (Light Armor)",
            "Unhindered (Light Armor)",
            "Wind Walker (Light Armor)",
            "Deft Movement (Light Armor)",
            "Novice Destruction (Destruction)",
            "Apprentice Destruction (Destruction)",
            "Adept Destruction (Destruction)",
            "Expert Destruction (Destruction)",
            "Master Destruction (Destruction)",
            "Rune Master (Destruction)",
            "Augmented Flames (Destruction)",
            "Intense Flames (Destruction)",
            "Augmented Frost (Destruction)",
            "Deep Freeze (Destruction)",
            "Augmented Shock (Destruction)",
            "Disintegrate (Destruction)",
            "Destruction Dual Casting (Destruction)",
            "Impact (Destruction)",
            "Juggernaut (Heavy Armor)",
            "Fists of Steel (Heavy Armor)",
            "Cushioned (Heavy Armor)",
            "Conditioning (Heavy Armor)",
            "Well Fitted (Heavy Armor)",
            "Tower of Strength (Heavy Armor)",
            "Matching Set (Heavy Armor)",
            "Reflect Blows (Heavy Armor)",
            "Novice Locks (Lockpicking)",
            "Apprentice Locks (Lockpicking)",
            "Quick Hands (Lockpicking)",
            "Wax Key (Lockpicking)",
            "Adept Locks (Lockpicking)",
            "Expert Locks (Lockpicking)",
            "Golden Touch (Lockpicking)",
            "Treasure Hunter (Lockpicking)",
            "Locksmith (Lockpicking)",
            "Unbreakable (Lockpicking)",
            "Master Locks (Lockpicking)",
            "Enchanter (Enchanting)",
            "Fire Enchanter (Enchanting)",
            "Frost Enchanter (Enchanting)",
            "Storm Enchanter (Enchanting)",
            "Insightful Enchanter (Enchanting)",
            "Corpus Enchanter (Enchanting)",
            "Extra Effect (Enchanting)",
            "Soul Squeezer (Enchanting)",
            "Soul Siphon (Enchanting)",
            "Armsman (One-Handed)",
            "Bladesman (One-Handed)",
            "Bone Breaker (One-Handed)",
            "Dual Flurry (One-Handed)",
            "Dual Savagery (One-Handed)",
            "Fighting Stance (One-Handed)",
            "Critical Charge (One-Handed)",
            "Savage Strike (One-Handed)",
            "Paralyzing Strike (One-Handed)",
            "Hack and Slash (One-Handed)",
            "Light Fingers (Pickpocket)",
            "Night Thief (Pickpocket)",
            "Cutpurse (Pickpocket)",
            "Keymaster (Pickpocket)",
            "Misdirection (Pickpocket)",
            "Perfect Touch (Pickpocket)",
            "Extra Pockets (Pickpocket)",
            "Poisoned (Pickpocket)",
            "Novice Illusion (Illusion)",
            "Animage (Illusion)",
            "Kindred Mage (Illusion)",
            "Quiet Casting (Illusion)",
            "Apprentice Illusion (Illusion)",
            "Adept Illusion (Illusion)",
            "Expert Illusion (Illusion)",
            "Master Illusion (Illusion)",
            "Hypnotic Gaze (Illusion)",
            "Aspect of Terror (Illusion)",
            "Rage (Illusion)",
            "Master of the Mind (Illusion)",
            "Illusion Dual Casting (Illusion)",
            "Steel Smithing (Smithing)",
            "Arcane Blacksmith (Smithing)",
            "Dwarven Smithing (Smithing)",
            "Orcish Smithing (Smithing)",
            "Ebony Smithing (Smithing)",
            "Daedric Smithing (Smithing)",
            "Elven Smithing (Smithing)",
            "Advanced Armors (Smithing)",
            "Glass Smithing (Smithing)",
            "Dragon Armor (Smithing)",
            "Stealth (Sneak)",
            "Backstab (Sneak)",
            "Deadly Aim (Sneak)",
            "Assassin's Blade (Sneak)",
            "Muffled Movement (Sneak)",
            "Light Foot (Sneak)",
            "Silent Roll (Sneak)",
            "Silence (Sneak)",
            "Shadow Warrior (Sneak)",
            "Novice Restoration (Restoration)",
            "Apprentice Restoration (Restoration)",
            "Adept Restoration (Restoration)",
            "Expert Restoration (Restoration)",
            "Master Restoration (Restoration)",
            "Recovery (Restoration)",
            "Avoid Death (Restoration)",
            "Regeneration (Restoration)",
            "Necromage (Restoration)",
            "Respite (Restoration)",
            "Restoration Dual Casting (Restoration)",
            "Ward Absorb (Restoration)",
            "Barbarian (Two-Handed)",
            "Champion's Stance (Two-Handed)",
            "Devastating Blow (Two-Handed)",
            "Great Critical Charge (Two-Handed)",
            "Sweep (Two-Handed)",
            "Warmaster (Two-Handed)",
            "Deep Wounds (Two-Handed)",
            "Limbsplitter (Two-Handed)",
            "Skullcrusher (Two-Handed)",
            "Haggling (Speech)",
            "Allure (Speech)",
            "Merchant (Speech)",
            "Investor (Speech)",
            "Fence (Speech)",
            "Master Trader (Speech)",
            "Bribery (Speech)",
            "Persuasion (Speech)",
            "Intimidation (Speech)",
        ]

    @staticmethod
    def harvest_count_range() -> range:
        return range(3, 11)

    @functools.cached_property
    def harvestables_base(self) -> List[str]:
        return [
            "Beehive Husk",
            "Bleeding Crown",
            "Blisterwort",
            "Blue Mountain Flower",
            "Cabbage",
            "Canis Root",
            "Carrot",
            "Chaurus Egg",
            "Creep Cluster",
            "Crimson Nirnroot",
            "Deathbell",
            "Dragon's Tongue",
            "Elves Ear",
            "Flame Stalk",
            "Fly Amanita",
            "Frost Mirriam",
            "Garlic",
            "Giant Lichen",
            "Gleamblossom",
            "Glowing Mushroom",
            "Gourd",
            "Grass Pod",
            "Hanging Moss",
            "Honeycomb",
            "Imp Stool",
            "Jazbay Grapes",
            "Juniper Berries",
            "Lavender",
            "Leek",
            "Mora Tapinella",
            "Namira's Rot",
            "Nightshade",
            "Nirnroot",
            "Nordic Barnacle",
            "Poison Bloom",
            "Potato",
            "Purple Mountain Flower",
            "Red Mountain Flower",
            "Rot Scale",
            "Scaly Pholiota",
            "Screaming Maw",
            "Snowberries",
            "Swamp Fungal Pod",
            "Thistle Branch",
            "Thorn Hook",
            "Tundra Cotton",
            "Wheat",
            "White Cap",
            "Yellow Mountain Flower",
        ]

    @functools.cached_property
    def harvestables_anniversary(self) -> List[str]:
        return [
            "Bloodgrass",
            "Harrada",
            "Ironwood Fruit",
            "Spiddal Stick",
            "Steel-Blue Entoloma",
        ]

    def harvestables(self) -> List[str]:
        harvestables: List[str] = self.harvestables_base[:]

        if self.has_anniversary_upgrade:
            harvestables.extend(self.harvestables_anniversary)

        return sorted(harvestables)

    @staticmethod
    def alchemy_effect_count_range() -> range:
        return range(2, 5)

    @functools.cached_property
    def alchemy_ingredients_base(self) -> List[str]:
        return [
            "Abecean Longfin",
            "Alocasia Fruit",
            "Aloe Vera Leaves",
            "Ambrosia",
            "Ancestor Moth Wing",
            "Angelfish",
            "Angler Larvae",
            "Ash Creep Cluster",
            "Ash Hopper Jelly",
            "Ashen Grass Pod",
            "Aster Bloom Core",
            "Bear Claws",
            "Bee",
            "Beehive Husk",
            "Bittergreen Petals",
            "Bleeding Crown",
            "Blind Watcher's Eye",
            "Bliss Bug Thorax",
            "Blister Pod Cap",
            "Blisterwort",
            "Blue Butterfly Wing",
            "Blue Dartwing",
            "Blue Mountain Flower",
            "Boar Tusk",
            "Bog Beacon",
            "Bone Meal",
            "Briar Heart",
            "Bungler's Bane",
            "Burnt Spriggan Wood",
            "Butterfly Wing",
            "Canis Root",
            "Charred Skeever Hide",
            "Chaurus Eggs",
            "Chaurus Hunter Antennae",
            "Chicken's Egg",
            "Chokeberry",
            "Chokeweed",
            "Coda Flower",
            "Comberry",
            "Congealed Putrescence",
            "Corkbulb Root",
            "Creep Cluster",
            "Crimson Nirnroot",
            "Cyrodilic Spadetail",
            "Daedra Heart",
            "Daedra Silk",
            "Daedra Venin",
            "Daedroth Teeth",
            "Deathbell",
            "Dragon's Tongue",
            "Dreugh Wax",
            "Dwarven Oil",
            "Ectoplasm",
            "Elves Ear",
            "Elytra Ichor",
            "Emperor Parasol Moss",
            "Eye of Sabre Cat",
            "Falmer Ear",
            "Felsaad Tern Feathers",
            "Fire Petal",
            "Fire Salts",
            "Flame Stalk",
            "Fly Amanita",
            "Frost Mirriam",
            "Frost Salts",
            "Fungus Stalk",
            "Garlic",
            "Giant Lichen",
            "Giant's Toe",
            "Glassfish",
            "Gleamblossom",
            "Glow Dust",
            "Glowing Mushroom",
            "Gnarl Bark",
            "Gold Kanet",
            "Goldfish",
            "Grass Pod",
            "Green Butterfly Wing",
            "Hackle-Lo Leaf",
            "Hagraven Claw",
            "Hagraven Feathers",
            "Hanging Moss",
            "Hawk Beak",
            "Hawk Feathers",
            "Hawk's Egg",
            "Heart of Order",
            "Histcarp",
            "Honeycomb",
            "Human Flesh",
            "Human Heart",
            "Hunger Tongue",
            "Hydnum Azure Giant Spore",
            "Hypha Facia",
            "Ice Wraith Teeth",
            "Imp Gall",
            "Imp Stool",
            "Jazbay Grapes",
            "Juniper Berries",
            "Juvenile Mudcrab",
            "Kagouti Hide",
            "Kresh Fiber",
            "Large Antlers",
            "Lavender",
            "Lichor",
            "Luminous Russula",
            "Luna Moth Wing",
            "Lyretail Anthias",
            "Marshmerrow",
            "Minotaur Horn",
            "Moon Sugar",
            "Mora Tapinella",
            "Mudcrab Chitin",
            "Namira's Rot",
            "Netch Jelly",
            "Nightshade",
            "Nightshade",
            "Nirnroot",
            "Nordic Barnacle",
            "Ogre's Teeth",
            "Orange Dartwing",
            "Pearl",
            "Pearlfish",
            "Pine Thrush Egg",
            "Poison Bloom",
            "Powdered Mammoth Tusk",
            "Purple Butterfly Wing",
            "Purple Mountain Flower",
            "Pygmy Sunfish",
            "Red Kelp Gas Bladder",
            "Red Mountain Flower",
            "Redwort Flower",
            "River Betty",
            "Rock Warbler Egg",
            "Roobrush",
            "Rot Scale",
            "Sabre Cat Tooth",
            "Salmon Roe",
            "Salt Pile",
            "Saltrice",
            "Scalon Fin",
            "Scaly Pholiota",
            "Scathecraw",
            "Screaming Maw",
            "Scrib Jelly",
            "Scrib Jerky",
            "Silverside Perch",
            "Skeever Tail",
            "Slaughterfish Egg",
            "Slaughterfish Scales",
            "Sload Soap",
            "Small Antlers",
            "Small Pearl",
            "Snowberries",
            "Spadefish",
            "Spawn Ash",
            "Spider Egg",
            "Spriggan Sap",
            "Stoneflower Petals",
            "Swamp Fungal Pod",
            "Taproot",
            "Thistle Branch",
            "Thorn Hook",
            "Torchbug Thorax",
            "Trama Root",
            "Troll Fat",
            "Tundra Cotton",
            "Vampire Dust",
            "Void Essence",
            "Void Salts",
            "Watcher's Eye",
            "Wheat",
            "White Cap",
            "Wisp Stalk Caps",
            "Wisp Wrappings",
            "Withering Moon",
            "Worm's Head Cap",
            "Yellow Mountain Flower",
        ]

    @functools.cached_property
    def alchemy_ingredients_anniversary(self) -> List[str]:
        return [
            "Bloodgrass",
            "Harrada",
            "Ironwood Fruit",
            "Mort Flesh",
            "Spiddal Stick",
            "Steel-Blue Entoloma",
            "Wild Grass Pod",
        ]

    def alchemy_ingredients(self) -> List[str]:
        alchemy_ingredients: List[str] = self.alchemy_ingredients_base[:]

        if self.has_anniversary_upgrade:
            alchemy_ingredients.extend(self.alchemy_ingredients_anniversary)

        return sorted(alchemy_ingredients)

    @staticmethod
    def alchemy_brewing_count_range() -> range:
        return range(2, 8)

    @staticmethod
    def alchemy_effects_potion() -> List[str]:
        return [
            "Cure Disease",
            "Cure Poison",
            "Fortify Alteration",
            "Fortify Barter",
            "Fortify Block",
            "Fortify Carry Weight",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Enchanting",
            "Fortify Health",
            "Fortify Heavy Armor",
            "Fortify Illusion",
            "Fortify Light Armor",
            "Fortify Lockpicking",
            "Fortify Magicka",
            "Fortify Marksman",
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Restoration",
            "Fortify Smithing",
            "Fortify Sneak",
            "Fortify Stamina",
            "Fortify Two-Handed",
            "Invisibility",
            "Light",
            "Night Eye",
            "Regenerate Health",
            "Regenerate Magicka",
            "Regenerate Stamina",
            "Resist Fire",
            "Resist Frost",
            "Resist Magic",
            "Resist Poison",
            "Resist Shock",
            "Restore Health",
            "Restore Magicka",
            "Restore Stamina",
            "Spell Absorption",
            "Waterbreathing",
        ]

    @staticmethod
    def alchemy_effects_poison() -> List[str]:
        return [
            "Damage Health",
            "Damage Magicka",
            "Damage Magicka Regen",
            "Damage Stamina",
            "Damage Stamina Regen",
            "Fear",
            "Frenzy",
            "Lingering Damage Health",
            "Lingering Damage Magicka",
            "Lingering Damage Stamina",
            "Paralysis",
            "Ravage Health",
            "Ravage Magicka",
            "Ravage Stamina",
            "Slow",
            "Weakness to Fire",
            "Weakness to Frost",
            "Weakness to Magic",
            "Weakness to Poison",
            "Weakness to Shock",
        ]

    @functools.cached_property
    def enchantment_effects_by_item_type(self) -> Dict[str, Any]:
        return {
            "Head Apparel": self.enchantment_effects_apparel_head,
            "Neck Apparel": self.enchantment_effects_apparel_neck,
            "Chest Apparel": self.enchantment_effects_apparel_chest,
            "Hands Apparel": self.enchantment_effects_apparel_hands,
            "Finger Apparel": self.enchantment_effects_apparel_finger,
            "Feet Apparel": self.enchantment_effects_apparel_feet,
            "Weapon 1": self.enchantment_effects_weapons,
            "Weapon 2": self.enchantment_effects_weapons,
            "Weapon 3": self.enchantment_effects_weapons,
        }

    def enchantment_effects(self) -> List[str]:
        effect_category: str = self.random.choice(list(self.enchantment_effects_by_item_type.keys()))

        effect_category_stripped = effect_category.replace(" 1", "")
        effect_category_stripped = effect_category_stripped.replace(" 2", "")
        effect_category_stripped = effect_category_stripped.replace(" 3", "")

        return [
            f"{effect_category_stripped} -> {effect}" for effect in self.enchantment_effects_by_item_type[effect_category]()
        ]

    @staticmethod
    def enchantment_effects_apparel_head() -> List[str]:
        return [
            "Fortify Alchemy",
            "Fortify Alteration",
            "Fortify Archery",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Illusion",
            "Fortify Lockpicking",
            "Fortify Restoration",
            "Fortify Magicka",
            "Fortify Magicka Regen",
            "Waterbreathing",
        ]

    @staticmethod
    def enchantment_effects_apparel_neck() -> List[str]:
        return [
            "Fortify Alchemy",
            "Fortify Alteration",
            "Fortify Archery",
            "Fortify Barter",
            "Fortify Block",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Heavy Armor",
            "Fortify Illusion",
            "Fortify Light Armor",
            "Fortify Lockpicking",
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Restoration",
            "Fortify Smithing",
            "Fortify Sneak",
            "Fortify Two-Handed",
            "Fortify Healing Rate",
            "Fortify Health",
            "Fortify Magicka",
            "Fortify Stamina",
            "Fortify Stamina Regen",
            "Fortify Carry Weight",
            "Resist Disease",
            "Resist Fire",
            "Resist Frost",
            "Resist Magic",
            "Resist Poison",
            "Resist Shock",
            "Waterbreathing",
        ]

    @staticmethod
    def enchantment_effects_apparel_chest() -> List[str]:
        return [
            "Fortify Alteration",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Heavy Armor",
            "Fortify Illusion",
            "Fortify Light Armor",
            "Fortify Restoration",
            "Fortify Smithing",
            "Fortify Healing Rate",
            "Fortify Health",
            "Fortify Magicka Regen",
            "Fortify Stamina",
            "Fortify Stamina Regen",
            "Fortify Alteration & Magicka Regen",
            "Fortify Conjuration & Magicka Regen",
            "Fortify Destruction & Magicka Regen",
            "Fortify Illusion & Magicka Regen",
            "Fortify Restoration & Magicka Regen",
            "Resist Disease",
            "Resist Poison",
        ]

    @staticmethod
    def enchantment_effects_apparel_hands() -> List[str]:
        return [
            "Fortify Alchemy",
            "Fortify Archery",
            "Fortify Block",
            "Fortify Heavy Armor",
            "Fortify Light Armor",
            "Fortify Lockpicking",
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Smithing",
            "Fortify Sneak",
            "Fortify Two-Handed",
            "Fortify Magicka",
            "Fortify Carry Weight",
            "Fortify Unarmed",
        ]

    @staticmethod
    def enchantment_effects_apparel_finger() -> List[str]:
        return [
            "Fortify Alchemy",
            "Fortify Alteration",
            "Fortify Archery",
            "Fortify Block",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Heavy Armor",
            "Fortify Illusion",
            "Fortify Light Armor",
            "Fortify Lockpicking",
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Restoration",
            "Fortify Smithing",
            "Fortify Sneak",
            "Fortify Two-Handed",
            "Fortify Healing Rate",
            "Fortify Health",
            "Fortify Magicka",
            "Fortify Magicka Regen",
            "Fortify Stamina",
            "Fortify Stamina Regen",
            "Fortify Carry Weight",
            "Fortify Unarmed",
            "Resist Disease",
            "Resist Fire",
            "Resist Frost",
            "Resist Magic",
            "Resist Poison",
            "Resist Shock",
            "Waterbreathing",
        ]

    @staticmethod
    def enchantment_effects_apparel_feet() -> List[str]:
        return [
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Sneak",
            "Fortify Two-Handed",
            "Fortify Stamina",
            "Fortify Stamina Regen",
            "Fortify Carry Weight",
            "Resist Fire",
            "Resist Frost",
            "Resist Shock",
            "Muffle",
        ]

    @staticmethod
    def enchantment_effects_apparel_shield() -> List[str]:
        return [
            "Fortify Block",
            "Fortify Health",
            "Resist Disease",
            "Resist Fire",
            "Resist Frost",
            "Resist Magic",
            "Resist Poison",
            "Resist Shock",
        ]

    @staticmethod
    def enchantment_effects_weapons() -> List[str]:
        return [
            "Absorb Health",
            "Absorb Magicka",
            "Absorb Stamina",
            "Chaos Damage",
            "Fire Damage",
            "Frost Damage",
            "Magicka Damage",
            "Shock Damage",
            "Stamina Damage",
            "Banish",
            "Fear",
            "Turn Undead",
            "Paralyze",
            "Soul Trap",
        ]

    @staticmethod
    def enchantment_effects_disenchantment() -> List[str]:
        return [
            "Fortify Alchemy",
            "Fortify Alteration",
            "Fortify Archery",
            "Fortify Barter",
            "Fortify Block",
            "Fortify Conjuration",
            "Fortify Destruction",
            "Fortify Heavy Armor",
            "Fortify Illusion",
            "Fortify Light Armor",
            "Fortify Lockpicking",
            "Fortify One-Handed",
            "Fortify Pickpocket",
            "Fortify Restoration",
            "Fortify Smithing",
            "Fortify Sneak",
            "Fortify Two-Handed",
            "Fortify Healing Rate",
            "Fortify Health",
            "Fortify Magicka",
            "Fortify Magicka Regen",
            "Fortify Stamina",
            "Fortify Stamina Regen",
            "Fortify Carry Weight",
            "Fortify Alteration & Magicka Regen",
            "Fortify Conjuration & Magicka Regen",
            "Fortify Destruction & Magicka Regen",
            "Fortify Illusion & Magicka Regen",
            "Fortify Restoration & Magicka Regen",
            "Fortify Unarmed",
            "Resist Disease",
            "Resist Fire",
            "Resist Frost",
            "Resist Magic",
            "Resist Poison",
            "Resist Shock",
            "Muffle",
            "Waterbreathing",
            "Absorb Health",
            "Absorb Magicka",
            "Absorb Stamina",
            "Chaos Damage",
            "Fire Damage",
            "Frost Damage",
            "Magicka Damage",
            "Shock Damage",
            "Stamina Damage",
            "Banish",
            "Fear",
            "Turn Undead",
            "Paralyze",
            "Soul Trap",
        ]

    @staticmethod
    def soul_trap_souls() -> List[str]:
        return [
            "Alpha Wolf (Petty)",
            "Chicken (Petty)",
            "Corrupted Shade (Petty)",
            "Cow (Petty)",
            "Deer (Petty)",
            "Dog (Petty)",
            "Draugr Thrall (Petty)",
            "Draugr (Petty)",
            "Elk (Petty)",
            "Fox (Petty)",
            "Frostbite Spider (Petty)",
            "Goat (Petty)",
            "Horker (Petty)",
            "Mudcrab (Petty)",
            "Rabbit (Petty)",
            "Skeever (Petty)",
            "Skeleton (Petty)",
            "Slaughterfish (Petty)",
            "Snow Fox (Petty)",
            "Wisp (Petty)",
            "Wolf (Petty)",
            "Ash Hopper (Lesser)",
            "Bear (Lesser)",
            "Bristleback (Lesser)",
            "Chaurus (Lesser)",
            "Death Hound (Lesser)",
            "Draugr Overlord (Lesser)",
            "Draugr Restless (Lesser)",
            "Draugr Wight (Lesser)",
            "Falmer Skulker (Lesser)",
            "Falmer (Lesser)",
            "Flame Atronach (Lesser)",
            "Frostbite Spider (Lesser)",
            "Gargoyle (Lesser)",
            "Giant Frostbite Spider (Lesser)",
            "Horse (Lesser)",
            "Ice Wolf (Lesser)",
            "Ice Wraith (Lesser)",
            "Pit Wolf (Lesser)",
            "Restless Draugr (Lesser)",
            "Riekling (Lesser)",
            "Riekling Scout (Lesser)",
            "Sabre Cat (Lesser)",
            "Shade (Lesser)",
            "Snowy Sabre Cat (Lesser)",
            "Spriggan (Lesser)",
            "Troll (Lesser)",
            "Venomfang Skeever (Lesser)",
            "Werewolf (Lesser)",
            "Wounded Frostbite Spider (Lesser)",
            "Ash Spawn (Common)",
            "Cave Bear (Common)",
            "Chaurus Reaper (Common)",
            "Curalmil (Common)",
            "Draugr Deathlord (Common)",
            "Draugr Scourge Lord (Common)",
            "Draugr Scourge (Common)",
            "Falmer Shadowmaster (Common)",
            "Frost Atronach (Common)",
            "Frost Troll (Common)",
            "Hagraven (Common)",
            "Hulking Draugr (Common)",
            "King Olaf One-Eye (Common)",
            "Mikrul Gauldurson (Common)",
            "Mounted Riekling (Common)",
            "Netch Calf (Common)",
            "Potema's Remains (Common)",
            "Riekling Chief (Common)",
            "Riekling Hunter (Common)",
            "Riekling Rider (Common)",
            "Riekling Warrior (Common)",
            "Sigdis Gauldurson (Common)",
            "Snow Bear (Common)",
            "Spriggan Matron (Common)",
            "Udefrykte (Common)",
            "Werebear (Common)",
            "Ash Spawn Skirmisher (Greater)",
            "Burnt Spriggan (Greater)",
            "Bull Netch (Greater)",
            "Chaurus Hunter (Greater)",
            "Draugr Death Overlord (Greater)",
            "Draugr Deathlord (Greater)",
            "Falmer Warmonger (Greater)",
            "Giant (Greater)",
            "King Olaf One-Eye (Greater)",
            "Riekling Courser (Greater)",
            "Spriggan Earth Mother (Greater)",
            "Storm Atronach (Greater)",
            "The Pale Lady (Greater)",
            "Wispmother (Greater)",
            "Falmer Nightprowler (Greater)",
            "Ash Spawn Immolator (Grand)",
            "Betty Netch (Grand)",
            "Dragon Priest (Grand)",
            "Draugr Death Overlord (Grand)",
            "Draugr Deathlord (Grand)",
            "Falmer Shadowmaster (Grand)",
            "Falmer Warmonger (Grand)",
            "Frost Giant (Grand)",
            "King Olaf One-Eye (Grand)",
            "Mammoth (Grand)",
            "Potema's Remains (Grand)",
            "Riekling Charger (Grand)",
            "NPC (Black)",
        ]

    @functools.cached_property
    def enchanted_staves_base(self) -> List[str]:
        return [
            "Staff of Magelight",
            "Staff of Paralysis",
            "Staff of Banishing",
            "Staff of Daedric Command",
            "Staff of Dread Zombies",
            "Staff of Expulsion",
            "Staff of Reanimation",
            "Staff of Revenants",
            "Staff of Soul Trapping",
            "Staff of Zombies",
            "Staff of the Familiar",
            "Staff of the Flame Atronach",
            "Staff of the Frost Atronach",
            "Staff of the Storm Atronach",
            "Staff of Chain Lightning",
            "Staff of Fireballs",
            "Staff of Firebolts",
            "Staff of Flames",
            "Staff of Frostbite",
            "Staff of Ice Spikes",
            "Staff of Ice Storms",
            "Staff of Icy Spear",
            "Staff of Incineration",
            "Staff of Lightning Bolts",
            "Staff of Sparks",
            "Staff of Thunderbolts",
            "Staff of the Flame Wall",
            "Staff of the Frost Wall",
            "Staff of the Storm Wall",
            "Staff of Calm",
            "Staff of Courage",
            "Staff of Fear",
            "Staff of Frenzy",
            "Staff of Fury",
            "Staff of Inspiration",
            "Staff of Vanquishment",
            "Grand Staff of Repulsion",
            "Grand Staff of Turning",
            "Minor Staff of Turning",
            "Staff of Mending",
            "Staff of Repulsion",
            "Staff of Turning",
            "Staff of the Healing Hand",
        ]

    @functools.cached_property
    def enchanted_staves_anniversary(self) -> List[str]:
        return [
            "Arm of the Moon",
            "Arm of the Sun",
            "Staff of Sheogorath",
        ]

    def enchanted_staves(self) -> List[str]:
        enchanted_staves: List[str] = self.enchanted_staves_base[:]

        if self.has_anniversary_upgrade:
            enchanted_staves.extend(self.enchanted_staves_anniversary)

        return sorted(enchanted_staves)

    @staticmethod
    def smithing_craft_count_range() -> range:
        return range(2, 7)

    @functools.cached_property
    def smithing_crafting_categories_base(self) -> List[str]:
        return [
            "Hide Armor",
            "Studded Armor",
            "Leather Armor",
            "Iron Armor",
            "Banded Iron Armor",
            "Bone Hawk Amulet",
            "Gold Jewelry",
            "Silver Jewelry",
            "Iron Weapons",
            "Imperial Armor",
            "Steel Armor",
            "Steel Weapons",
            "Elven Armor",
            "Elven Gilded Armor",
            "Elven Weapons",
            "Scaled Armor",
            "Steel Plate Armor",
            "Glass Armor",
            "Glass Weapons",
            "Dwarven Armor",
            "Dwarven Weapons",
            "Orcish Armor",
            "Orcish Weapons",
            "Ebony Armor",
            "Ebony Weapons",
            "Daedric Armor",
            "Daedric Weapons",
            "Dragonscale Armor",
            "Dragonplate Armor",
            "Dragonbone Weapons",
            "Ancient Nord Armor",
            "Nord Hero Weapons",
            "Housebuilding Materials",
            "Bonemold Armor",
            "Improved Bonemold Armor",
            "Chitin Armor",
            "Nordic Carved Armor",
            "Nordic Weapons",
            "Stalhrim Armor",
            "Stalhrim Weapons",
            "Shellbug Helmet",
            "Corkbulb Ammunition",
            "Bonemold Ammunition",
            "Amber Armor",
            "Amber Weapons",
            "Madness Armor",
            "Madness Weapons",
            "Dark Armor",
            "Dark Weapons",
            "Golden Armor",
            "Golden Weapons",
            "Fishing Rods",
        ]

    @functools.cached_property
    def smithing_crafting_categories_anniversary(self) -> List[str]:
        return [
            "Arcane Arrows",
            "Bone Arrows",
            "Telekinesis Arrows",
            "Soul Stealer Arrows",
            "Soul Gem Arrowhead",
            "Backpacks",
            "Camping Supplies",
            "Nordic Jewelry",
            "Animal Accessories",
            "Vigil Armor",
            "Spell Knight Armor",
            "Netch Leather Armor",
            "Silver Armor",
            "Indoril Armor",
            "Her Hand Armor",
            "Remnant Armor",
            "Remnant Weapons",
        ]

    def smithing_crafting_categories(self) -> List[str]:
        smithing_crafting_categories: List[str] = self.smithing_crafting_categories_base[:]

        if self.has_anniversary_upgrade:
            smithing_crafting_categories.extend(self.smithing_crafting_categories_anniversary)

        return sorted(smithing_crafting_categories)

    @staticmethod
    def smithing_qualities() -> List[str]:
        return [
            "Fine",
            "Superior",
            "Exquisite",
            "Flawless",
            "Epic",
            "Legendary",
        ]

    @functools.cached_property
    def smithing_weapon_categories_base(self) -> List[str]:
        return [
            "Iron Weapons",
            "Steel Weapons",
            "Elven Weapons",
            "Glass Weapons",
            "Dwarven Weapons",
            "Orcish Weapons",
            "Ebony Weapons",
            "Daedric Weapons",
            "Dragonbone Weapons",
            "Nord Hero Weapons",
            "Nordic Weapons",
            "Stalhrim Weapons",
            "Amber Weapons",
            "Madness Weapons",
            "Dark Weapons",
            "Golden Weapons",
        ]

    @functools.cached_property
    def smithing_weapon_categories_anniversary(self) -> List[str]:
        return [
            "Remnant Weapons",
        ]

    def smithing_weapon_categories(self) -> List[str]:
        smithing_weapon_categories: List[str] = self.smithing_weapon_categories_base[:]

        if self.has_anniversary_upgrade:
            smithing_weapon_categories.extend(self.smithing_weapon_categories_anniversary)

        return sorted(smithing_weapon_categories)

    @functools.cached_property
    def smithing_armor_categories_base(self) -> List[str]:
        return [
            "Hide Armor",
            "Studded Armor",
            "Leather Armor",
            "Iron Armor",
            "Banded Iron Armor",
            "Imperial Armor",
            "Steel Armor",
            "Elven Armor",
            "Elven Gilded Armor",
            "Scaled Armor",
            "Steel Plate Armor",
            "Glass Armor",
            "Dwarven Armor",
            "Orcish Armor",
            "Ebony Armor",
            "Daedric Armor",
            "Dragonscale Armor",
            "Dragonplate Armor",
            "Ancient Nord Armor",
            "Bonemold Armor",
            "Improved Bonemold Armor",
            "Chitin Armor",
            "Nordic Carved Armor",
            "Stalhrim Armor",
            "Shellbug Helmet",
            "Amber Armor",
            "Madness Armor",
            "Dark Armor",
            "Golden Armor",
        ]

    @functools.cached_property
    def smithing_armor_categories_anniversary(self) -> List[str]:
        return [
            "Vigil Armor",
            "Spell Knight Armor",
            "Netch Leather Armor",
            "Silver Armor",
            "Indoril Armor",
            "Her Hand Armor",
            "Remnant Armor",
        ]

    def smithing_armor_categories(self) -> List[str]:
        smithing_armor_categories: List[str] = self.smithing_armor_categories_base[:]

        if self.has_anniversary_upgrade:
            smithing_armor_categories.extend(self.smithing_armor_categories_anniversary)

        return sorted(smithing_armor_categories)

    @functools.cached_property
    def atronach_forge_outcomes_base(self) -> List[str]:
        return [
            "Flame Atronach",
            "Frost Atronach",
            "Storm Atronach",
            "Dremora",
            "Daedra Heart",
            "Staff of the Flame Atronach",
            "Staff of the Frost Atronach",
            "Staff of the Storm Atronach",
            "Spell Tome: Conjure Flame Atronach",
            "Spell Tome: Conjure Frost Atronach",
            "Spell Tome: Conjure Storm Atronach",
            "Spell Tome: Soul Trap",
            "Scroll of Conjure Flame Atronach",
            "Scroll of Conjure Frost Atronach",
            "Scroll of Conjure Storm Atronach",
            "Conjurer's Elixir",
            "Fire Salts",
            "Frost Salts",
            "Void Salts",
            "Random Daedric Enchanted Weapon",
            "Random Daedric Enchanted Armor",
            "Daedric Bow",
            "Daedric Mace",
            "Daedric Dagger",
            "Daedric Greatsword",
            "Daedric Sword",
            "Daedric Warhammer",
            "Daedric War Axe",
            "Daedric Battleaxe",
            "Daedric Shield",
            "Daedric Boots",
            "Daedric Gauntlets",
            "Daedric Armor",
            "Daedric Helmet",
            "Spell Tome: Conjure Staada",
            "Scroll of Conjure Staada",
            "Staada",
            "Spell Tome: Conjure Golden Saint Archer",
            "Spell Tome: Conjure Golden Saint Warrior",
            "Scroll of Conjure Golden Saint Archer",
            "Scroll of Conjure Golden Saint Warrior",
            "Golden Saint Archer",
            "Golden Saint Warrior",
            "Spell Tome: Conjure Dark Seducer Archer",
            "Spell Tome: Conjure Dark Seducer Warrior",
            "Scroll of Conjure Dark Seducer Archer",
            "Scroll of Conjure Dark Seducer Warrior",
            "Dark Seducer Archer",
            "Dark Seducer Warrior",
        ]

    @functools.cached_property
    def atronach_forge_outcomes_anniversary(self) -> List[str]:
        return [
            "Spell Tome: Conjure Ayleid Lich",
        ]

    def atronach_forge_outcomes(self) -> List[str]:
        atronach_forge_outcomes: List[str] = self.atronach_forge_outcomes_base[:]

        if self.has_anniversary_upgrade:
            atronach_forge_outcomes.extend(self.atronach_forge_outcomes_anniversary)

        return sorted(atronach_forge_outcomes)

    @staticmethod
    def baking_count_range() -> range:
        return range(2, 13)

    @staticmethod
    def baking_goods() -> List[str]:
        return [
            "Apple Dumpling",
            "Apple Pie",
            "Braided Bread",
            "Bread",
            "Chicken Dumpling",
            "Garlic Bread",
            "Jazbay Crostata",
            "Juniper Berry Crostata",
            "Lavender Dumpling",
            "Potato Bread",
            "Snowberry Crostata",
            "Sweet Roll",
        ]

    @staticmethod
    def baking_ingredient_count_range() -> range:
        return range(3, 10)

    @staticmethod
    def baking_ingredients() -> List[str]:
        return [
            "Sack of Flour",
            "Green Apple",
            "Red Apple",
            "Salt Pile",
            "Butter",
            "Chicken's Egg",
            "Jug of Milk",
            "Chicken Breast",
            "Garlic",
            "Leek",
            "Jazbay Grapes",
            "Juniper Berries",
            "Moon Sugar",
            "Snowberries",
            "Lavender",
            "Potato",
        ]

    @staticmethod
    def construtible_houses() -> List[str]:
        return [
            "Lakeview Manor",
            "Windstad Manor",
            "Heljarchen Hall",
        ]

    @staticmethod
    def construtible_house_features() -> List[str]:
        return [
            "Cellar",
            "Aquarium",
            "Armory",
            "Kitchen",
            "Library",
            "Alchemy Laboratory",
            "Storage Room",
            "Trophy Room",
            "Bedrooms",
            "Enchanter's Tower",
            "Greenhouse",
        ]

    @staticmethod
    def cooking_count_range() -> range:
        return range(2, 13)

    @staticmethod
    def cooking_foods() -> List[str]:
        return [
            "Apple Cabbage Stew",
            "Beef Stew",
            "Cabbage Potato Soup",
            "Clam Chowder",
            "Cooked Angelfish",
            "Cooked Angler",
            "Cooked Angler Larvae",
            "Cooked Arctic Char",
            "Cooked Arctic Grayling",
            "Cooked Beef",
            "Cooked Boar Meat",
            "Cooked Brook Bass",
            "Cooked Carp",
            "Cooked Catfish",
            "Cooked Cod",
            "Cooked Direfish",
            "Cooked Glass Catfish",
            "Cooked Glassfish",
            "Cooked Goldfish",
            "Cooked Juvenile Mudcrab",
            "Cooked Lyretail Anthias",
            "Cooked Pearlfish",
            "Cooked Pogfish",
            "Cooked Pygmy Sunfish",
            "Cooked Scorpion Fish",
            "Cooked Spadefish",
            "Cooked Tripod Spiderfish",
            "Cooked Vampire Fish",
            "Crab Stew",
            "Creamy Crab Bisque",
            "Elsweyr Fondue",
            "Grilled Chicken Breast",
            "Horker and Ash Yam Stew",
            "Horker Loaf",
            "Horker Stew",
            "Horse Haunch",
            "Leg of Goat Roast",
            "Mammoth Steak",
            "Pheasant Roast",
            "Potato Crab Chowder",
            "Potato Soup",
            "Rabbit Haunch",
            "Roasted Tomato Crab Bisque",
            "Salmon Steak",
            "Steamed Mudcrab Legs",
            "Tomato Soup",
            "Vegetable Soup",
            "Venison Chop",
            "Venison Stew",
            "Hot Apple Cabbage Stew",
            "Hot Beef Stew",
            "Hot Cabbage Potato Soup",
            "Hot Cabbage Soup",
            "Hot Clam Chowder",
            "Hot Crab Stew",
            "Hot Creamy Crab Bisque",
            "Hot Elsweyr Fondue",
            "Hot Horker and Ash Yam Stew",
            "Hot Horker Stew",
            "Hot Potato Crab Chowder",
            "Hot Potato Soup",
            "Hot Roasted Tomato Crab Bisque",
            "Hot Tomato Soup",
            "Hot Vegetable Soup",
            "Hot Venison Stew",
        ]

    @staticmethod
    def cooking_ingredient_count_range() -> range:
        return range(3, 10)

    @staticmethod
    def cooking_ingredients() -> List[str]:
        return [
            "Potato",
            "Leek",
            "Fire Salts",
            "Tomato",
            "Cabbage",
            "Garlic",
            "Crab Meat",
            "Butter",
            "Jug of Milk",
            "Lavender",
            "Ash Yam",
            "Moon Sugar",
            "Eidar Cheese Wheel",
            "Ale",
            "Sack of Flour",
            "Clam Meat",
            "Carrot",
            "Red Apple",
            "Mudcrab Legs",
        ]

    @staticmethod
    def spider_scrolls() -> List[str]:
        return [
            "Exploding Flame Spider",
            "Flame Cloaked Spider",
            "Jumping Flame Spider",
            "Exploding Frost Spider",
            "Frost Cloaked Spider",
            "Jumping Frost Spider",
            "Exploding Poison Spider",
            "Poison Cloaked Spider",
            "Jumping Poison Spider",
            "Exploding Shock Spider",
            "Shock Cloaked Spider",
            "Jumping Shock Spider",
        ]

    @staticmethod
    def mining_count_range() -> range:
        return range(3, 13)

    @staticmethod
    def mining_mineables() -> List[str]:
        return [
            "Amethyst",
            "Corundum",
            "Ebony",
            "Emerald",
            "Gold",
            "Heart Stone",
            "Iron",
            "Malachite",
            "Moonstone",
            "Orichalcum",
            "Quicksilver",
            "Ruby",
            "Sapphire",
            "Silver",
            "Stalhrim",
        ]

    @staticmethod
    def mining_mines() -> List[str]:
        return [
            "Bilegulch Mine",
            "Broken Tusk Mine",
            "Cidhna Mine",
            "Damphall Mine",
            "Dushnikh Mine",
            "Embershard Mine",
            "Fenn's Gulch Mine",
            "Fort Fellhammer",
            "Gloombound Mine",
            "Goldenrock Mine",
            "Halted Stream Camp",
            "Iron-Breaker Mine",
            "Knifepoint Ridge",
            "Kolskeggr Mine",
            "Left Hand Mine",
            "Lost Prospect Mine",
            "Mor Khazgur Mine",
            "Northwind Mine",
            "Quicksilver Mine",
            "Raven Rock Mine",
            "Redbelly Mine",
            "Rockwallow Mine",
            "Sanuarach Mine",
            "Soljund's Sinkhole",
            "Steamscorch Mine",
            "Whistling Mine",
        ]

    @staticmethod
    def mining_ingots() -> List[str]:
        return [
            "Corundum Ingot",
            "Ebony Ingot",
            "Gold Ingot",
            "Iron Ingot",
            "Orichalcum Ingot",
            "Quicksilver Ingot",
            "Refined Malachite",
            "Refined Moonstone",
            "Silver Ingot",
            "Steel Ingot",
        ]

    @staticmethod
    def smelting_count_range() -> range:
        return range(5, 21)

    @staticmethod
    def smelting_smeltables() -> List[str]:
        return [
            "Corundum Ingot",
            "Dwarven Metal Ingot",
            "Ebony Ingot",
            "Gold Ingot",
            "Iron Ingot",
            "Madness Ingot",
            "Orichalcum Ingot",
            "Quicksilver Ingot",
            "Refined Amber",
            "Refined Malachite",
            "Refined Moonstone",
            "Silver Ingot",
            "Steel Ingot",
        ]

    @staticmethod
    def tanning_count_range() -> range:
        return range(8, 29)

    @staticmethod
    def tanning_tannables() -> List[str]:
        return [
            "Bear Pelt",
            "Cave Bear Pelt",
            "Cow Hide",
            "Deer Hide",
            "Goat Hide",
            "Fox Pelt",
            "Goat Hide",
            "Horse Hide",
            "Ice Wolf Pelt",
            "Sabre Cat Pelt",
            "Sabre Cat Snow Pelt",
            "Snow Bear Pelt",
            "Snow Fox Pelt",
            "Vale Deer Hide",
            "Vale Sabre Cat Hide",
            "Wolf Pelt",
        ]

    @staticmethod
    def hunting_count_range() -> range:
        return range(3, 7)

    @staticmethod
    def hunting_huntables() -> List[str]:
        return [
            "Bear",
            "Cave Bear",
            "Deer",
            "Fox",
            "Goat",
            "Ice Wolf",
            "Sabre Cat",
            "Snowy Sabre Cat",
            "Snow Bear",
            "Snow Fox",
            "Vale Deer",
            "Vale Sabre Cat",
            "Wolf",
            "Ash Hopper",
            "Bristleback",
            "Mudcrab",
            "Horker",
            "Rabbit",
            "Elk",
        ]

    @staticmethod
    def hunting_harvestable_count_range() -> range:
        return range(2, 6)

    @staticmethod
    def hunting_harvestables() -> List[str]:
        return [
            "Bear Pelt",
            "Bear Claws",
            "Cave Bear Pelt",
            "Snow Bear Pelt",
            "Venison",
            "Deer Hide",
            "Small Antlers",
            "Large Antlers",
            "Vale Deer Hide",
            "Fox Pelt",
            "Snow Fox Pelt",
            "Goat Hide",
            "Leg of Goat",
            "Goat Horns",
            "Wolf Pelt",
            "Ice Wolf Pelt",
            "Sabre Cat Pelt",
            "Eye of Sabre Cat",
            "Sabre Cat Tooth",
            "Vale Sabre Cat Hide",
            "Snowy Sabre Cat Pelt",
            "Ash Hopper Jelly",
            "Ash Hopper Leg",
            "Ash Hopper Meat",
            "Chitin Plate",
            "Boar Tusk",
            "Boar Meat",
            "Mudcrab Chitin",
            "Mudcrab Legs",
            "Crab Meat",
            "Horker Meat",
            "Horker Tusk",
            "Raw Rabbit Leg",
        ]

    @staticmethod
    def fishing_spot_count_range() -> range:
        return range(6, 19)

    @staticmethod
    def fishing_spots() -> List[str]:
        return [
            "Bronze Water Cave",
            "Skaal Village",
            "Haknir's Shoal",
            "Bujold's Retreat",
            "Northshore Landing",
            "Raven Rock",
            "Damphall Mine",
            "Fort Dawnguard",
            "Deepwood Vale",
            "Orphan's Tear",
            "Castle Volkihar",
            "Wreck of the Winter War",
            "Wreck of The Pride of Tel Vos",
            "Windhelm",
            "Anga's Mill",
            "Pilgrim's Trench",
            "Nightgate Inn",
            "Hela's Folly",
            "Dawnstar",
            "Shadowgreen Cavern",
            "Great Lift at Alftand",
            "Broken Oar Grotto",
            "Lost Knife Hideout",
            "Darkshade",
            "Embershard Mine",
            "Reachwater Rock",
            "Chillwind Depths",
            "Dead Drop Falls",
            "Brood Cavern",
            "Geirmund's Hall",
            "Shriekwind Bastion",
            "Brittleshin Pass",
            "Half-Moon Mill",
            "Ilinalta's Deep",
            "Stony Creek Cave",
            "Riften Fishery",
            "Black-Briar Meadery",
            "Honeyside",
            "Heartwood Mill",
            "Faldar's Tooth",
            "Markarth",
            "The Guardian Stones",
            "Movarth's Lair",
            "Morthal",
            "Reachcliff Cave",
            "Riften",
            "Lost Valley Redoubt",
            "Swindler's Den",
            "Solitude Sawmill",
            "East Empire Company Warehouse",
            "Crabber's Shanty",
            "Dragon Bridge",
            "Salvius Farm",
            "Deep Folk Crossing",
            "Mixwater Mill",
            "Darkwater Crossing",
            "Ivarstead",
            "Chillfurrow Farm",
            "Riverwood",
            "Riverside Shack",
            "Kynesgrove",
        ]

    @staticmethod
    def fishing_count_range() -> range:
        return range(4, 13)

    @staticmethod
    def fishing_fish() -> List[str]:
        return [
            "Abecean Longfin (Freezing Waters)",
            "Angler Larvae (Freezing Waters)",
            "Arctic Grayling (Freezing Waters)",
            "Juvenile Mudcrab (Freezing Waters)",
            "Arctic Char (Freezing Waters)",
            "Cod (Freezing Waters)",
            "Angler (Freezing Waters)",
            "Silverside Perch (Underground)",
            "Direfish (Underground)",
            "Glass Catfish (Underground)",
            "Histcarp (Underground)",
            "Tripod Spiderfish (Underground)",
            "Vampire Fish (Underground)",
            "Scorpion Fish (Underground)",
            "Abecean Longfin (Temperate Lakes)",
            "Glassfish (Temperate Lakes)",
            "Silverfish Perch (Temperate Lakes)",
            "Salmon (Temperate Lakes)",
            "Slaughterfish (Temperate Lakes)",
            "Cyrodilic Spadetail (Temperate Lakes)",
            "Goldfish (Temperate Lakes)",
            "Juvenile Mudcrab (Temperate Lakes)",
            "Brook Bass (Temperate Lakes)",
            "Carp (Temperate Lakes)",
            "Angelfish (Temperate Lakes)",
            "Cyrodilic Spadetail (Temperate Lakes - Rain)",
            "Catfish (Temperate Lakes - Rain)",
            "Abecean Longfin (Temperate Lakes - Rain)",
            "Glassfish (Temperate Lakes - Rain)",
            "Pearlfish (Temperate Lakes - Rain)",
            "Pygmy Sunfish (Temperate Lakes - Rain)",
            "Salmon (Temperate Lakes - Rain)",
            "Slaughterfish (Temperate Lakes - Rain)",
            "Angelfish (Temperate Lakes - Rain)",
            "River Betty (Temperate Streams)",
            "Brook Bass (Temperate Streams)",
            "Pogfish (Temperate Streams)",
            "Salmon (Temperate Streams)",
            "Histcarp (Temperate Streams)",
            "Juvenile Mudcrab (Temperate Streams)",
            "Spadefish (Temperate Streams)",
            "Carp (Temperate Streams)",
            "Lyretail Anthias (Temperate Streams)",
            "River Betty (Temperate Streams - Rain)",
            "Spadefish (Temperate Streams - Rain)",
            "Pogfish (Temperate Streams - Rain)",
            "Salmon (Temperate Streams - Rain)",
            "Histcarp (Temperate Streams - Rain)",
            "Juvenile Mudcrab (Temperate Streams - Rain)",
            "Pearlfish (Temperate Streams - Rain)",
            "Brook Bass (Temperate Streams - Rain)",
            "Slaughterfish (Temperate Streams - Rain)",
            "Lyretail Anthias (Temperate Streams - Rain)",
        ]

    @staticmethod
    def adoptable_children() -> List[str]:
        return [
            "Alesan",
            "Blaise",
            "Francois Beaufort",
            "Lucia",
            "Runa Fair-Shield",
            "Hroar",
            "Samuel",
            "Sofie",
            "Aeta",
            "Braith",
            "Britte",
            "Clinton Lylvieve",
            "Dorthe",
            "Eirid",
            "Erith",
            "Frodnar",
            "Gralnach",
            "Hrefna",
            "Knud",
            "Minette Vinius",
            "Skuli",
            "Sissel",
            "Svari",
        ]

    @functools.cached_property
    def houses_base(self) -> List[str]:
        return [
            "Breezehome",
            "Honeyside",
            "Vlindrel Hall",
            "Hjerim",
            "Proudspire Manor",
            "Severin Manor",
        ]

    @functools.cached_property
    def houses_anniversary(self) -> List[str]:
        return [
            "Bloodchill Cavern",
            "Dead Man's Dread",
            "Gallows Hall",
            "Goldenhills Plantation",
            "Hendraheim",
            "Myrwatch",
            "Nchuanthumz",
            "Shadowfoot Sanctum",
            "Tundra Homestead",
        ]

    def houses(self) -> List[str]:
        houses: List[str] = self.houses_base[:]

        if self.has_anniversary_upgrade:
            houses.extend(self.houses_anniversary)

        return sorted(houses)

    @functools.cached_property
    def marriable_npcs_base(self) -> List[str]:
        return [
            "Aela the Huntress",
            "Aeri",
            "Anwen",
            "Avrusa Sarethi",
            "Borgakh the Steel Heart",
            "Brelyna Maryon",
            "Camilla Valerius",
            "Dravynea the Stoneweaver",
            "Ghorza gra-Bagol",
            "Gilfre",
            "Hilund",
            "Iona",
            "Jenassa",
            "Jordis the Sword-Maiden",
            "Lydia",
            "Mjoll the Lioness",
            "Morwen",
            "Muiri",
            "Njada Stonearm",
            "Orla",
            "Rayya",
            "Ria",
            "Senna",
            "Shahvee",
            "Sylgja",
            "Taarie",
            "Temba Wide-Arm",
            "Uthgerd the Unbroken",
            "Viola Giordano",
            "Ysolda",
            "Ainethach",
            "Angrenor Once-Honored",
            "Argis the Bulwark",
            "Athis",
            "Balimund",
            "Belrand",
            "Benor",
            "Calder",
            "Cosnach",
            "Derkeethus",
            "Farkas",
            "Filnjar",
            "Gat gro-Shargakh",
            "Ghorbash the Iron Hand",
            "Gregor",
            "Halbarn Iron-Fur",
            "Marcurio",
            "Moth gro-Bagol",
            "Octieve San",
            "Omluag",
            "Onmund",
            "Pavo Attius",
            "Perth",
            "Quintus Navale",
            "Revyn Sadri",
            "Roggi Knot-Beard",
            "Romlyn Dreth",
            "Rulnik Wind-Strider",
            "Scouts-Many-Marshes",
            "Sondas Drenim",
            "Sorex Vinius",
            "Stenvar",
            "Torvar",
            "Valdimar",
            "Vilkas",
            "Vorstag",
            "Wilhelm",
        ]

    @functools.cached_property
    def marriable_npcs_anniversary(self) -> List[str]:
        return [
            "Rulnik Wind-Strider",
        ]

    def marriable_npcs(self) -> List[str]:
        marriable_npcs: List[str] = self.marriable_npcs_base[:]

        if self.has_anniversary_upgrade:
            marriable_npcs.extend(self.marriable_npcs_anniversary)

        return sorted(marriable_npcs)

    @staticmethod
    def thane_holds() -> List[str]:
        return [
            "Eastmarch",
            "Falkreath",
            "Haafingar",
            "Hjaalmarch",
            "The Pale",
            "The Reach",
            "The Rift",
            "Whiterun",
            "Winterhold",
        ]

    @staticmethod
    def brawlable_npcs() -> List[str]:
        return [
            "Mikael",
            "Uthgerd the Unbroken",
            "Rolff Stone-Fist",
            "Cosnach",
            "Chief Burguk",
            "Chief Larak",
            "Chief Mauhulakh",
            "Chief Yamarz",
            "Benor",
            "Borkul the Beast",
            "Dryston",
            "Hofgrir Horse-Crusher",
            "Stig Salt-Plank",
            "Keerava",
            "Haelga",
            "Bersi Honey-Hand",
            "Ranmir",
        ]

    @functools.cached_property
    def artifacts_base(self) -> List[str]:
        return [
            "Keening",
            "Mehrunes' Razor",
            "Mace of Molag Bal",
            "Aetherial Staff",
            "Miraak's Staff",
            "Sanguine Rose",
            "Staff of Magnus",
            "Skull of Corruption",
            "Wabbajack",
            "Chillrend",
            "Dawnbreaker",
            "Dragonbane",
            "Harkon's Sword",
            "Miraak's Sword",
            "Nightingale Blade",
            "Dawnguard Rune Axe",
            "The Rueful Axe",
            "Wuuthrad",
            "Auriel's Bow",
            "Dwarven Black Bow of Fate",
            "Nightingale Bow",
            "Bloodskal Blade",
            "Ebony Blade",
            "Sword of Jyggalag",
            "Dawnguard Rune Hammer",
            "Nerveshatter",
            "Volendrung",
            "Ebony Mail",
            "Savior's Hide",
            "Miraak's Boots",
            "Miraak's Gloves",
            "Masque of Clavicus Vile",
            "Aetherial Shield",
            "Auriel's Shield",
            "Dawnguard Rune Shield",
            "Shield of Ysgramor",
            "Spellbreaker",
            "Targe of the Blooded",
            "Ahzidal",
            "Dukaan",
            "Hevnoraak",
            "Konahrik",
            "Krosis",
            "Miraak",
            "Morokei",
            "Nahkriin",
            "Otar",
            "Rahgot",
            "Vokun",
            "Volsung",
            "Wooden Mask",
            "Zahkriisos",
            "Amulet of Articulation",
            "Necromancer Amulet",
            "Aetherial Crown",
            "Denstagmer's Ring",
            "Mentor's Ring",
            "Ring of Hircine",
            "Ring of Khajiit",
            "Ring of Namira",
            "Ring of Phynaster",
            "Ring of Surroundings",
            "Ring of the Wind",
            "Vampiric Ring",
            "Warlock's Ring",
            "Archmage's Robes",
            "Miraak's Robes",
            "Azura's Star",
            "The Black Star",
            "Oghma Infinium",
            "Skeleton Key",
            "The White Phial",
        ]

    @functools.cached_property
    def artifacts_anniversary(self) -> List[str]:
        return [
            "Mace of the Crusader",
            "Sunder",
            "Staff of Sheogorath",
            "Blackwater Blade",
            "Bloodthirst",
            "Dawnfang",
            "Sword of the Crusader",
            "Torment",
            "Ruin's Edge",
            "Chrysamere",
            "Ice Blade of the Monarch",
            "Umbra",
            "Stendarr's Hammer",
            "Shadowrend",
            "Cuirass of the Crusader",
            "Lord's Mail",
            "Boots of the Crusader",
            "Fists of Randagulf",
            "Gauntlets of the Crusader",
            "Wraithguard",
            "Gray Cowl of Nocturnal",
            "Helm of the Crusader",
            "Shield of the Crusader",
        ]

    def artifacts(self) -> List[str]:
        artifacts: List[str] = self.artifacts_base[:]

        if self.has_anniversary_upgrade:
            artifacts.extend(self.artifacts_anniversary)

        return sorted(artifacts)

    @staticmethod
    def crimes() -> List[str]:
        return [
            "Stealing",
            "Lockpicking",
            "Trespassing",
            "Disturbing the Jarl's peace",
            "Pickpocketing",
            "Assault",
            "Stealing horses",
            "Jailbreak",
            "Forgery",
            "Shapeshifting",
            "Murder",
        ]

    @staticmethod
    def jails() -> List[str]:
        return [
            "Castle Dour Dungeon",
            "The Bulwark Jail",
            "The Chill",
            "Cidhna Mine",
            "Dawnstar Barracks",
            "Dragonsreach Dungeon",
            "Falkreath Barracks",
            "Guardhouse",
            "Palace of the Kings",
            "Riften Jail",
        ]

    @staticmethod
    def bounty_amount_range() -> range:
        return range(100, 5001, 100)

    @staticmethod
    def bounty_regions() -> List[str]:
        return [
            "Eastmarch",
            "Falkreath",
            "Haafingar",
            "Hjaalmarch",
            "The Pale",
            "The Reach",
            "The Rift",
            "Whiterun",
            "Winterhold",
            "Solstheim",
        ]

    @staticmethod
    def stealing_value_range() -> range:
        return range(50, 2001, 50)

    @staticmethod
    def stealing_fences() -> List[str]:
        return [
            "Tonilia",
            "Mallus Maccius",
            "Gulum-Ei",
            "Enthir",
            "Endon",
            "Niranye",
            "Atahbah",
            "Ma'jhad",
            "Zaynabi",
        ]

    @staticmethod
    def stealing_locations() -> List[str]:
        return [
            "Nepos's House (Markarth)",
            "Ogmund's House (Markarth)",
            "Smelter Overseer's House (Markarth)",
            "The Treasury House (Markarth)",
            "Aerin's House (Riften)",
            "Bolli's House (Riften)",
            "Marise Aravel's House (Riften)",
            "Romlyn Dreth's House (Riften)",
            "Snow-Shod Manor (Riften)",
            "Valindor's House (Riften)",
            "Addvar's House (Solitude)",
            "Bryling's House (Solitude)",
            "Evette San's House (Solitude)",
            "Hall of the Dead (Solitude)",
            "Jala's House (Solitude)",
            "Vittoria Vici's House (Solitude)",
            "Amren's House (Whiterun)",
            "Carlotta Valentia's House (Whiterun)",
            "Heimskr's House (Whiterun)",
            "House of Clan Battle-Born (Whiterun)",
            "House Gray-Mane (Whiterun)",
            "Uthgerd's House (Whiterun)",
            "Ysolda's House (Whiterun)",
            "Atheron Residence (Windhelm)",
            "Belyn Hlaalu's House (Windhelm)",
            "Brunwulf Free-Winter's House (Windhelm)",
            "House of Clan Cruel-Sea (Windhelm)",
            "House of Clan Shatter-Shield (Windhelm)",
            "Viola Giordano's House (Windhelm)",
            "Arnleif and Sons Trading Company (Markarth)",
            "The Hag's Cure (Markarth)",
            "Markarth Stables (Markarth)",
            "Silver-Blood Inn (Markarth)",
            "The Bee and Barb (Riften)",
            "Elgrim's Elixirs (Riften)",
            "Haelga's Bunkhouse (Riften)",
            "Pawned Prawn (Riften)",
            "Riften Stables (Riften)",
            "The Scorched Hammer (Riften)",
            "Angeline's Aromatics (Solitude)",
            "Bits and Pieces (Solitude)",
            "Fletcher (Solitude)",
            "Radiant Raiment (Solitude)",
            "Solitude Stables (Solitude)",
            "The Winking Skeever (Solitude)",
            "Arcadia's Cauldron (Whiterun)",
            "The Bannered Mare (Whiterun)",
            "Belethor's General Goods (Whiterun)",
            "The Drunken Huntsman (Whiterun)",
            "Warmaiden's (Whiterun)",
            "Whiterun Stables (Whiterun)",
            "Candlehearth Hall (Windhelm)",
            "East Empire Company (Windhelm)",
            "New Gnisis Cornerclub (Windhelm)",
            "Sadri's Used Wares (Windhelm)",
            "The White Phial (Windhelm)",
            "Windhelm Stables (Windhelm)",
            "The Mortar and Pestle (Dawnstar)",
            "Grave Concoctions (Falkreath)",
            "Gray Pine Goods (Falkreath)",
            "Thaumaturgist's Hut (Morthal)",
            "Birna's Oddments (Winterhold)",
            "Riverwood Trader (Riverwood)",
            "Rorik's Manor (Rorikstead)",
        ]

    @functools.cached_property
    def npcs_base(self) -> List[str]:
        return [
            "a Dawnstar Guard",
            "a Falkreath Guard",
            "a Hjaalmarch Guard (Stonehills)",
            "a Markarth Guard",
            "a Morthal Guard",
            "a Penitus Oculatus Agent (Dragon Bridge)",
            "a Redoran Guard",
            "a Rift Guard (Heartwood Mill)",
            "a Rift Guard (Sarethi Farm)",
            "a Riften Guard",
            "a Shor's Stone Guard",
            "a Solitude Guard",
            "a Stormcloak Guard (Darkwater Crossing)",
            "a Stormcloak Guard (Kynesgrove)",
            "a Thalmor Soldier",
            "a Whiterun Guard",
            "a Windhelm Guard",
            "a Winterhold Guard",
            "Abelone (Dawnstar)",
            "Acolyte Jenssen (Whiterun)",
            "Addvild (Riften)",
            "Adeber (Markarth)",
            "Adisla (Windhelm)",
            "Adonato Leotelli (Windhelm)",
            "Adril Arano (Raven Rock)",
            "Aduri Sarethi (Sarethi Farm)",
            "Aeri (Anga's Mill)",
            "Aerin (Riften)",
            "Ahlam (Whiterun)",
            "Aia Arria (Solitude)",
            "Aicantar (Markarth)",
            "Ainethach (Karthwasten)",
            "Alessandra (Riften)",
            "Alexia Vici (Solitude)",
            "Alfhild Battle-Born (Whiterun)",
            "Alva (Morthal)",
            "an Ivarstead Guard",
            "Ancano (Winterhold)",
            "Andurs (Whiterun)",
            "Angrenor Once-Honored (Windhelm)",
            "Angvid (Whistling Mine)",
            "Anton Virane (Markarth)",
            "Anwen (Markarth)",
            "Aquillius Aeresius (Solitude)",
            "Arivanya (Windhelm)",
            "Arngeir (High Hrothgar)",
            "Arniel Gane (Winterhold)",
            "Arob (Dushnikh Yal)",
            "Asgeir Snow-Shod (Riften)",
            "Aslfur (Morthal)",
            "Ataf (Solitude)",
            "Atar (Karthwasten)",
            "Augur of Dunlain (Winterhold)",
            "Avrusa Sarethi (Sarethi Farm)",
            "Avulstein Gray-Mane (Whiterun)",
            "Azzada Lylvieve (Dragon Bridge)",
            "Badnir (Whistling Mine)",
            "Bagrak (Mor Khazgur)",
            "Balagog gro-Nolob (Nightgate Inn)",
            "Barknar (Ivarstead)",
            "Beitild (Dawnstar)",
            "Belchimac (Karthwasten)",
            "Belyn Hlaalu (Windhelm)",
            "Bendt (Solitude)",
            "Bergritte Battle-Born (Whiterun)",
            "Bjartur (Solitude)",
            "Bodil (Dawnstar)",
            "Bolfrida Brandy-Mug (Windhelm)",
            "Bolgeir Bearclaw (Solitude)",
            "Bolli (Riften)",
            "Bonlund (Falkreath)",
            "Bor (Narzulbur)",
            "Borgny (Dawnstar)",
            "Borri (High Hrothgar)",
            "Boti (Ivarstead)",
            "Brenuin (Whiterun)",
            "Briehl (Riften)",
            "Brill (Whiterun)",
            "Brina Merilis (Dawnstar)",
            "Brunwulf Free-Winter (Windhelm)",
            "Bryling (Solitude)",
            "Bulfrek (Dawnstar)",
            "Cairine (Markarth)",
            "Calixto Corrium (Windhelm)",
            "Captain Aldis (Solitude)",
            "Captain Aquilius (Markarth)",
            "Captain Lonely-Gale (Windhelm)",
            "Captain Veleth (Raven Rock)",
            "Captain Wayfinder (Dawnstar)",
            "Chief Mauhulakh (Narzulbur)",
            "Chief Yamarz (Largashbur)",
            "Commander Caius (Whiterun)",
            "Constance Michel (Riften)",
            "Crescius Caerellius (Raven Rock)",
            "Curwe (Loreius Farm)",
            "Daighre (Markarth)",
            "Dalan Merchad (Windhelm)",
            "Deeja (Solitude)",
            "Degaine (Markarth)",
            "Delacourt (Falkreath)",
            "Dengeir of Stuhn (Falkreath)",
            "Dervenin (Solitude)",
            "Dinya Balu (Riften)",
            "Dorian (Solitude)",
            "Drahff (Riften)",
            "Dravin Llanith (Riften)",
            "Dreyla Alor (Raven Rock)",
            "Dryston (Markarth)",
            "Dulug (Dushnikh Yal)",
            "Edda (Riften)",
            "Edith (Dawnstar)",
            "Eimar (Whiterun)",
            "Einarth (High Hrothgar)",
            "Elder Othreloth (Raven Rock)",
            "Embry (Riverwood)",
            "Emperor Titus Mede II (Solitude)",
            "Enmon (Karthwasten)",
            "Ennis (Rorikstead)",
            "Ennoc (Markarth)",
            "Erdi (Solitude)",
            "Erikur (Solitude)",
            "Eris (Solitude)",
            "Faleen (Markarth)",
            "Faryl Atheron (Windhelm)",
            "Fianna (Whiterun)",
            "Finna (Skaal Village)",
            "Frabbi (Markarth)",
            "Freir (Solitude)",
            "Fridrika (Solitude)",
            "Froki Whetted-Blade (Froki's Shack)",
            "From-Deepest-Fathoms (Riften)",
            "Frorkmar Banner-Torn (Dawnstar)",
            "Fruki (Dawnstar)",
            "Fultheim (Nightgate Inn)",
            "Gadba gro-Largash (Narzulbur)",
            "Galathil (Riften)",
            "Galdrus Hlervu (Raven Rock)",
            "Galmar Stone-Fist (Windhelm)",
            "Ganna Uriel (Kynesgrove)",
            "Garakh (Largashbur)",
            "Garan Marethi (Volkihar Keep)",
            "Gat gro-Shargakh (Markarth)",
            "Gemma Uriel (Kynesgrove)",
            "General Tullius (Solitude)",
            "Gerda (Whiterun)",
            "Gerdur (Riverwood)",
            "Gestur Rockbreaker (Stonehills)",
            "Ghak (Dushnikh Yal)",
            "Ghamorz (Mor Khazgur)",
            "Gian the Fist (Riften)",
            "Gianna (Solitude)",
            "Gilfre (Mixwater Mill)",
            "Gisli (Solitude)",
            "Gjak (Dawnstar)",
            "Gloth (Whiterun)",
            "Gorm (Morthal)",
            "Grelod the Kind (Riften)",
            "Greta (Solitude)",
            "Grogmar gro-Burzag (Shor's Stone)",
            "Grosta (Heartwood Mill)",
            "Gul (Mor Khazgur)",
            "Gularzob (Largashbur)",
            "Gunding (Whistling Mine)",
            "Guthrum (Dawnstar)",
            "Gwendolyn (Whiterun)",
            "Gwilin (Ivarstead)",
            "Haelga (Riften)",
            "Haran (Winterhold)",
            "Harrald (Riften)",
            "Hathrasil (Markarth)",
            "Hefid the Deaf (Riften)",
            "Heimskr (Whiterun)",
            "Heimvar (Solitude)",
            "Helgird (Windhelm)",
            "Helvard (Falkreath)",
            "Hemming Black-Briar (Riften)",
            "Hermir Strong-Heart (Windhelm)",
            "Hern (Half-Moon Mill)",
            "Hert (Half-Moon Mill)",
            "Hewnon Black-Skeever (Riften)",
            "Hilde (Riverwood)",
            "Hjorunn (Solitude)",
            "Hod (Riverwood)",
            "Horgeir (Dragon Bridge)",
            "Horik Halfhand (Dawnstar)",
            "Horm (Solitude)",
            "Hreinn (Markarth)",
            "Hroggar (Morthal)",
            "Hroki (Markarth)",
            "Hrongar (Whiterun)",
            "Idesa Sadri (Windhelm)",
            "Idgrod the Younger (Morthal)",
            "Idolaf Battle-Born (Whiterun)",
            "Illdi (Solitude)",
            "Imedhnain (Markarth)",
            "Indara Caerellia (Falkreath)",
            "Indaryn (Riften)",
            "Inge Six Fingers (Solitude)",
            "Ingun Black-Briar (Riften)",
            "Irgnir (Dawnstar)",
            "Irileth (Whiterun)",
            "Irnskar Ironhand (Solitude)",
            "Jaree-Ra (Solitude)",
            "Jarl Balgruuf the Greater (Whiterun)",
            "Jarl Elisif the Fair (Solitude)",
            "Jarl Idgrod Ravencrone (Morthal)",
            "Jarl Igmund (Markarth)",
            "Jarl Korir (Winterhold)",
            "Jarl Laila Law-Giver (Riften)",
            "Jarl Siddgeir (Falkreath)",
            "Jarl Skald (Dawnstar)",
            "Jarl Ulfric Stormcloak (Windhelm)",
            "Jawanan (Solitude)",
            "Jervar (Whiterun)",
            "Jesper (Stonehills)",
            "Jod (Dawnstar)",
            "Jofthor (Ivarstead)",
            "Jon Battle-Born (Whiterun)",
            "Jora (Windhelm)",
            "Jorgen (Morthal)",
            "Jorleif Hjerim (Windhelm)",
            "Jorn (Solitude)",
            "Jouane Manette (Rorikstead)",
            "Julienne Lylvieve (Dragon Bridge)",
            "Kai Wet-Pommel (Winterhold)",
            "Kaie (Markarth)",
            "Karita (Dawnstar)",
            "Karl (Dawnstar)",
            "Katla (Solitude)",
            "Kharag gro-Shurkul (Solitude)",
            "Kjar (Windhelm)",
            "Kjeld the Younger (Kynesgrove)",
            "Klimmek (Ivarstead)",
            "Knjakr (Riften)",
            "Kodlak Whitemane (Whiterun)",
            "Kodrir (Anga's Mill)",
            "Kraldar (Winterhold)",
            "Kust (Falkreath)",
            "Lash gra-Dushnikh (Karthwasten)",
            "Legate Adventus Caesennius (Solitude)",
            "Legate Emmanuel Admand (Markarth)",
            "Legate Rikke (Solitude)",
            "Legate Skulnar (Falkreath)",
            "Legate Taurinus Duilis (Morthal)",
            "Leifur (Anga's Mill)",
            "Leigelf (Dawnstar)",
            "Lemkil (Rorikstead)",
            "Leonara Arius (Riften)",
            "Lillith Maiden-Loom (Whiterun)",
            "Lisette (Solitude)",
            "Lleril Morvayn (Raven Rock)",
            "Lodvar (Dragon Bridge)",
            "Lond (Dawnstar)",
            "Lord Harkon (Volkihar Keep)",
            "Lortheim (Windhelm)",
            "Louis Letrush (Riften)",
            "Luaffyn (Windhelm)",
            "Lurbuk (Morthal)",
            "Lygrleid (Windhelm)",
            "Lynea (Markarth)",
            "Lynly Star-Sung (Ivarstead)",
            "Mahk (Dushnikh Yal)",
            "Malthyr Elenil (Windhelm)",
            "Malur Seloth (Winterhold)",
            "Maramal (Riften)",
            "Mathies (Falkreath)",
            "Maurice Jondrelle (Whiterun)",
            "Maven Black-Briar (Riften)",
            "Melaran (Solitude)",
            "Mena (Karthwasten)",
            "Michel Lylvieve (Dragon Bridge)",
            "Mikael (Whiterun)",
            "Mirabelle Ervine (Winterhold)",
            "Modhna (Volkihar Keep)",
            "Mogdurz (Narzulbur)",
            "Mogrul (Fort Dawnguard)",
            "Mogrul (Raven Rock)",
            "Molgrom Twice-Killed (Riften)",
            "Muiri (Markarth)",
            "Mul gro-Largash (Narzulbur)",
            "Mulush gro-Shugurz (Markarth)",
            "Nagrub (Dushnikh Yal)",
            "Namasur (Volkihar Keep)",
            "Narfi (Ivarstead)",
            "Narri (Falkreath)",
            "Nazeem (Whiterun)",
            "Neetrenaza (Windhelm)",
            "Nenya (Falkreath)",
            "Nikulas (Skaal Village)",
            "Nils (Windhelm)",
            "Nilsine Shatter-Shield (Windhelm)",
            "Niluva Hlaalu (Riften)",
            "Nimriel (Whiterun)",
            "Nirya (Winterhold)",
            "Nivenor (Riften)",
            "Noster Eagle-Eye (Solitude)",
            "Nura Snow-Shod (Riften)",
            "Octieve San (Solitude)",
            "Odar (Solitude)",
            "Odfel (Shor's Stone)",
            "Oglub (Dushnikh Yal)",
            "Olava the Feeble (Whiterun)",
            "Olda (Dragon Bridge)",
            "Olfina Gray-Mane (Whiterun)",
            "Olfrid Battle-Born (Whiterun)",
            "Olur (Mor Khazgur)",
            "Omluag (Markarth)",
            "Ondolemar (Markarth)",
            "Orini Dral (Riften)",
            "Orla (Markarth)",
            "Orthjolf (Volkihar Keep)",
            "Orthus Endario (Windhelm)",
            "Pactur (Stonehills)",
            "Pantea Ateia (Solitude)",
            "Pavo Attius (Markarth)",
            "Perth (Soljund's Sinkhole)",
            "Quintus Navale (Windhelm)",
            "Ragnar (Karthwasten)",
            "Ranmir (Winterhold)",
            "Rargal Thrallmaster (Volkihar Keep)",
            "Ravam Verethi (Dawnstar)",
            "Reburrus Quintilius (Markarth)",
            "Reldith (Rorikstead)",
            "Rhiada (Markarth)",
            "Rogatius Salvius (Markarth)",
            "Rolff Stone-Fist (Windhelm)",
            "Romlyn Dreth (Riften)",
            "Rondach (Markarth)",
            "Rorik (Rorikstead)",
            "Rorlund (Solitude)",
            "Sabine Nytte (Solitude)",
            "Saerlund (Riften)",
            "Saffir (Whiterun)",
            "Safia (Solitude)",
            "Salonia Caelia (Volkihar Keep)",
            "Salvianus (Riften)",
            "Sarthis Idren (Riften)",
            "Savos Aren (Winterhold)",
            "Scouts-Many-Marshes (Windhelm)",
            "Senna (Markarth)",
            "Severio Pelagia (Whiterun)",
            "Shahvee (Windhelm)",
            "Shel (Dushnikh Yal)",
            "Sibbi Black-Briar (Riften)",
            "Sifnar Ironkettle (Windhelm)",
            "Sigrid (Riverwood)",
            "Sigurd (Whiterun)",
            "Silana Petreia (Solitude)",
            "Silus Vesuius (Dawnstar)",
            "Sinding (Falkreath)",
            "Sinmir (Whiterun)",
            "Sirgar (Stonehills)",
            "Skaggi Scar-Face (Markarth)",
            "Skjor (Whiterun)",
            "Slitter (Raven Rock)",
            "Snilf (Riften)",
            "Snilling (Solitude)",
            "Snorreid (Solitude)",
            "Sogrlaf (Windhelm)",
            "Sondas Drenim (Darkwater Crossing)",
            "Sorli the Builder (Stonehills)",
            "Sosia Tremellia (Markarth)",
            "Stalf (Volkihar Keep)",
            "Stands-In-Shallows (Windhelm)",
            "Storn Crag-Strider (Skaal Village)",
            "Styrr (Solitude)",
            "Susanna the Wicked (Windhelm)",
            "Suvaris Atheron (Windhelm)",
            "Svana Far-Shield (Riften)",
            "Swanhvir (Stonehills)",
            "Swims-In-Deep-Water (Riften)",
            "Sylgja (Shor's Stone)",
            "Synda Llanith (Riften)",
            "Tacitus Sallustius (Markarth)",
            "Teeba-Ei (Stonehills)",
            "Tekla (Falkreath)",
            "Temba Wide-Arm (Ivarstead)",
            "Thadgeir (Falkreath)",
            "Thaena (Winterhold)",
            "Thongvor Silver-Blood (Markarth)",
            "Thonjolf (Winterhold)",
            "Thonnir (Morthal)",
            "Thorgar (Whistling Mine)",
            "Thoron (Solitude)",
            "Threki the Innocent (Riften)",
            "Tilma the Haggard (Whiterun)",
            "Tormir (Darkwater Crossing)",
            "Torsten Cruel-Sea (Windhelm)",
            "Tova Shatter-Shield (Windhelm)",
            "Tulvur (Windhelm)",
            "Tuthul (Soljund's Sinkhole)",
            "Tythis Ulen (Riften)",
            "Umurn (Dushnikh Yal)",
            "Una (Solitude)",
            "Unmid Snow-Shod (Riften)",
            "Urog (Narzulbur)",
            "Urzoga gra-Shugurz (Markarth)",
            "Valindor (Riften)",
            "Vantus Loreius (Loreius Farm)",
            "Varnius Junius (Dragon Bridge)",
            "Velehk Sain (Winterhold)",
            "Verner Rock-Chucker (Darkwater Crossing)",
            "Viarmo (Solitude)",
            "Vigdis Salvius (Markarth)",
            "Vignar Gray-Mane (Whiterun)",
            "Vingalmo (Volkihar Keep)",
            "Viola Giordano (Windhelm)",
            "Viriya (Riften)",
            "Vittoria Vici (Solitude)",
            "Voada (Markarth)",
            "Voldsea Giryon (Windhelm)",
            "Vulwulf Snow-Shod (Riften)",
            "Willem (Markarth)",
            "Wilmuth (Whiterun)",
            "Wujeeta (Riften)",
            "Wulfgar (High Hrothgar)",
            "Xander (Solitude)",
            "Yatul (Narzulbur)",
            "Yngvar the Singer (Markarth)",
            "Yrsarald Thrice-Pierced (Windhelm)",
        ]

    @functools.cached_property
    def npcs_anniversary(self) -> List[str]:
        return [
            "a Reclamation Priest (Raven Rock)",
            "Aldepius (Dragon Bridge)",
            "Azadi (Shor's Stone)",
            "Halvar (Rorikstead)",
            "Josla (Karthwasten)",
            "Rulnik Wind-Strider (Whiterun)",
            "Sirayar (Ivarstead)",
        ]

    def npcs(self) -> List[str]:
        npcs: List[str] = self.npcs_base[:]

        if self.has_anniversary_upgrade:
            npcs.extend(self.npcs_anniversary)

        return sorted(npcs)

    @staticmethod
    def diseases() -> List[str]:
        return [
            "Ataxia",
            "Bone Break Fever",
            "Brain Rot",
            "Brown Rot",
            "Droops",
            "Food Poisoning",
            "Greenspore",
            "Gutworm",
            "Rattles",
            "Rockjoint",
            "Sanguinare Vampiris",
            "Witbane",
        ]

    @staticmethod
    def perks_werewolf() -> List[str]:
        return [
            "Bestial Strength",
            "Animal Vigor",
            "Gorging",
            "Savage Feeding",
            "Totem of Ice Brothers",
            "Totem of the Moon",
            "Totem of Terror",
            "Totem of the Predator",
        ]

    @staticmethod
    def perks_vampire_lord() -> List[str]:
        return [
            "Power of the Grave",
            "Blood Healing",
            "Detect All Creatures",
            "Mist Form",
            "Supernatural Reflexes",
            "Unearthly Will",
            "Poison Talons",
            "Night Cloak",
            "Vampiric Grip",
            "Summon Gargoyle",
            "Corpse Curse",
        ]

    @functools.cached_property
    def armor_sets_base(self) -> List[str]:
        return [
            "Amber",
            "Bonemold",
            "Chitin",
            "Chitin Heavy",
            "Daedric",
            "Dark Seducer",
            "Dragonplate",
            "Dragonscale",
            "Dwarven",
            "Ebony",
            "Elven",
            "Fur",
            "Glass",
            "Golden Saint",
            "Hide",
            "Iron",
            "Leather",
            "Madness",
            "Nordic Carved",
            "Orcish",
            "Scaled",
            "Stalhrim Heavy",
            "Stalhrim Light",
            "Steel",
            "Steel Plate",
        ]

    @functools.cached_property
    def armor_sets_anniversary(self) -> List[str]:
        return [
            "Daedric Mail",
            "Dragonplate Insulated",
            "Dwarven Mail",
            "Ebony Plate",
            "Ebony Spell Knight",
            "Elven Hunter",
            "Her Hand",
            "Iron Plate",
            "Iron Spell Knight",
            "Leather Scout",
            "Netch Leather",
            "Orcish Plate",
            "Orcish Scaled",
            "Remnant",
            "Shadowed Netch Leather",
            "Silver",
            "Stalhrim Fur",
            "Steel Soldier",
            "Steel Spell Knight",
            "Studded Dragonscale",
        ]

    def armor_sets(self) -> List[str]:
        armor_sets: List[str] = self.armor_sets_base[:]

        if self.has_anniversary_upgrade:
            armor_sets.extend(self.armor_sets_anniversary)

        return sorted(armor_sets)

    @functools.cached_property
    def armor_pieces_base(self) -> List[str]:
        return [
            "Amber Armor",
            "Amber Boots",
            "Amber Gauntlets",
            "Amber Helmet",
            "Amber Shield",
            "Banded Iron Armor",
            "Banded Iron Shield",
            "Bonemold Armor",
            "Bonemold Boots",
            "Bonemold Gauntlets",
            "Bonemold Guard Armor",
            "Bonemold Helmet",
            "Bonemold Pauldron Armor",
            "Bonemold Shield",
            "Chitin Armor",
            "Chitin Boots",
            "Chitin Bracers",
            "Chitin Heavy Armor",
            "Chitin Heavy Boots",
            "Chitin Heavy Gauntlets",
            "Chitin Heavy Helmet",
            "Chitin Helmet",
            "Chitin Shield",
            "Daedric Armor",
            "Daedric Boots",
            "Daedric Gauntlets",
            "Daedric Helmet",
            "Daedric Shield",
            "Dark Seducer Armor",
            "Dark Seducer Boots",
            "Dark Seducer Gauntlets",
            "Dark Seducer Helmet",
            "Dark Seducer Shield",
            "Dragonplate Armor",
            "Dragonplate Boots",
            "Dragonplate Gauntlets",
            "Dragonplate Helmet",
            "Dragonplate Shield",
            "Dragonscale Armor",
            "Dragonscale Boots",
            "Dragonscale Gauntlets",
            "Dragonscale Helmet",
            "Dragonscale Shield ",
            "Dwarven Armor",
            "Dwarven Boots",
            "Dwarven Gauntlets",
            "Dwarven Helmet",
            "Dwarven Shield",
            "Ebony Armor",
            "Ebony Boots",
            "Ebony Gauntlets",
            "Ebony Helmet",
            "Ebony Shield",
            "Elven Armor",
            "Elven Boots",
            "Elven Gauntlets",
            "Elven Gilded Armor",
            "Elven Helmet",
            "Elven Shield",
            "Fur Armor",
            "Fur Boots",
            "Fur Bracers",
            "Fur Gauntlets",
            "Fur Helmet",
            "Fur Shoes",
            "Glass Armor",
            "Glass Boots",
            "Glass Gauntlets",
            "Glass Helmet",
            "Glass Shield",
            "Golden Saint Armor",
            "Golden Saint Boots",
            "Golden Saint Gauntlets",
            "Golden Saint Helmet",
            "Golden Saint Shield",
            "Hide Armor",
            "Hide Boots",
            "Hide Bracers",
            "Hide Helmet",
            "Hide Shield",
            "Improved Bonemold Armor",
            "Improved Bonemold Boots",
            "Improved Bonemold Gauntlets",
            "Improved Bonemold Helmet",
            "Improved Bonemold Shield",
            "Iron Armor",
            "Iron Boots",
            "Iron Gauntlets",
            "Iron Helmet",
            "Iron Shield",
            "Leather Armor",
            "Leather Boots",
            "Leather Bracers",
            "Leather Helmet",
            "Madness Armor",
            "Madness Boots",
            "Madness Gauntlets",
            "Madness Helmet",
            "Madness Shield",
            "Nordic Carved Armor",
            "Nordic Carved Boots",
            "Nordic Carved Gauntlets",
            "Nordic Carved Helmet",
            "Nordic Shield",
            "Orcish Armor",
            "Orcish Boots",
            "Orcish Gauntlets",
            "Orcish Helmet",
            "Orcish Shield",
            "Scaled Armor",
            "Scaled Boots",
            "Scaled Bracers",
            "Scaled Helmet",
            "Scaled Horn Armor",
            "Shellbug Helmet",
            "Stalhrim Heavy Armor",
            "Stalhrim Heavy Boots",
            "Stalhrim Heavy Gauntlets",
            "Stalhrim Helmet",
            "Stalhrim Light Armor",
            "Stalhrim Light Boots",
            "Stalhrim Light Bracers",
            "Stalhrim Light Helmet",
            "Stalhrim Shield",
            "Steel Armor",
            "Steel Cuffed Boots",
            "Steel Helmet",
            "Steel Horned Helmet",
            "Steel Imperial Gauntlets",
            "Steel Nordic Gauntlets",
            "Steel Plate Armor",
            "Steel Plate Boots",
            "Steel Plate Gauntlets",
            "Steel Plate Helmet",
            "Steel Shield",
            "Steel Shin Boots",
            "Studded Armor",
        ]

    @functools.cached_property
    def armor_pieces_anniversary(self) -> List[str]:
        return [
            "Boiled Netch Leather Armor",
            "Boiled Netch Leather Helmet",
            "Daedric Mail",
            "Daedric Mail Boots",
            "Daedric Mail Gauntlets",
            "Daedric Plate Armor",
            "Daedric Plate Helmet",
            "Dragonplate Insulated Boots",
            "Dragonplate Insulated Cuirass",
            "Dragonplate Insulated Gauntlets",
            "Dragonplate Insulated Helmet",
            "Dwarven Mail",
            "Dwarven Mail Boots",
            "Dwarven Mail Gauntlets",
            "Dwarven Mail Helmet",
            "Dwarven Plate Armor",
            "Dwarven Plate Boots",
            "Ebony Plate Armor",
            "Ebony Plate Boots",
            "Ebony Plate Gauntlets",
            "Ebony Plate Helmet",
            "Ebony Spell Knight Armor",
            "Ebony Spell Knight Boots",
            "Ebony Spell Knight Gauntlets",
            "Ebony Spell Knight Helmet",
            "Elven Hunter Armor",
            "Elven Hunter Boots",
            "Elven Hunter Gauntlets",
            "Her Hand Armor",
            "Her Hand Boots",
            "Her Hand Gauntlets",
            "Her Hand Helmet",
            "Iron Plate Armor",
            "Iron Plate Boots",
            "Iron Plate Gauntlets",
            "Iron Plate Helmet",
            "Iron Spell Knight Armor",
            "Iron Spell Knight Boots",
            "Iron Spell Knight Gauntlets",
            "Iron Spell Knight Helmet",
            "Leather Scout Armor",
            "Leather Scout Boots",
            "Leather Scout Gauntlets",
            "Leather Scout Helmet",
            "Netch Leather Armor",
            "Netch Leather Boots",
            "Netch Leather Bracers",
            "Netch Leather Helmet",
            "Netch Leather Shield",
            "Netch Leather Tower Shield",
            "Orcish Plate Armor",
            "Orcish Plate Boots",
            "Orcish Plate Gauntlets",
            "Orcish Plate Helmet",
            "Orcish Scaled Armor",
            "Orcish Scaled Boots",
            "Orcish Scaled Gauntlets",
            "Orcish Scaled Helmet",
            "Ordinator Shield",
            "Redoran Watchman's Helmet",
            "Remnant Armor",
            "Remnant Boots",
            "Remnant Gloves",
            "Remnant Hood",
            "Remnant Shield",
            "Shadowed Boiled Netch Leather Armor",
            "Shadowed Boiled Netch Leather Helmet",
            "Shadowed Netch Leather Armor",
            "Shadowed Netch Leather Boots",
            "Shadowed Netch Leather Bracers",
            "Shadowed Netch Leather Helmet",
            "Shadowed Netch Leather Shield",
            "Shadowed Netch Leather Tower Shield",
            "Silver Armor",
            "Silver Boots",
            "Silver Gauntlets",
            "Silver Helmet",
            "Stalhrim Fur Armor",
            "Stalhrim Fur Boots",
            "Stalhrim Fur Gauntlets",
            "Stalhrim Fur Helmet",
            "Steel Soldier Armor",
            "Steel Soldier Boots",
            "Steel Soldier Gauntlets",
            "Steel Soldier Helmet",
            "Steel Spell Knight Armor",
            "Steel Spell Knight Boots",
            "Steel Spell Knight Gauntlets",
            "Steel Spell Knight Helmet",
            "Studded Dragonscale Armor",
            "Studded Dragonscale Boots",
            "Studded Dragonscale Gauntlets",
            "Studded Dragonscale Helmet",
        ]

    def armor_pieces(self) -> List[str]:
        armor_pieces: List[str] = self.armor_pieces_base[:]

        if self.has_anniversary_upgrade:
            armor_pieces.extend(self.armor_pieces_anniversary)

        return sorted(armor_pieces)

    @staticmethod
    def weapon_sets() -> List[str]:
        return [
            "Amber",
            "Daedric",
            "Dark",
            "Dragonbone",
            "Dwarven",
            "Ebony",
            "Elven",
            "Glass",
            "Golden",
            "Iron",
            "Madness",
            "Nord Hero",
            "Nordic",
            "Orcish",
            "Skyforge Steel",
            "Stalhrim",
            "Steel",
        ]

    @functools.cached_property
    def weapons_base(self) -> List[str]:
        return [
            "Amber Battleaxe",
            "Amber Bow",
            "Amber Dagger",
            "Amber Greatsword",
            "Amber Mace",
            "Amber Sword",
            "Amber War Axe",
            "Amber Warhammer",
            "Ancient Nord Warhammer",
            "Crossbow",
            "Daedric Battleaxe",
            "Daedric Bow",
            "Daedric Dagger",
            "Daedric Greatsword",
            "Daedric Mace",
            "Daedric Sword",
            "Daedric War Axe",
            "Daedric Warhammer",
            "Dark Battleaxe",
            "Dark Bow",
            "Dark Dagger",
            "Dark Greatsword",
            "Dark Mace",
            "Dark Sword",
            "Dark War Axe",
            "Dark Warhammer",
            "Dawnguard Warhammer",
            "Dragonbone Battleaxe",
            "Dragonbone Bow",
            "Dragonbone Dagger",
            "Dragonbone Greatsword",
            "Dragonbone Mace",
            "Dragonbone Sword",
            "Dragonbone War Axe",
            "Dragonbone Warhammer",
            "Dwarven Battleaxe",
            "Dwarven Bow",
            "Dwarven Crossbow",
            "Dwarven Dagger",
            "Dwarven Greatsword",
            "Dwarven Mace",
            "Dwarven Sword",
            "Dwarven War Axe",
            "Dwarven Warhammer",
            "Ebony Battleaxe",
            "Ebony Bow",
            "Ebony Dagger",
            "Ebony Greatsword",
            "Ebony Mace",
            "Ebony Sword",
            "Ebony War Axe",
            "Ebony Warhammer",
            "Elven Battleaxe",
            "Elven Bow",
            "Elven Dagger",
            "Elven Greatsword",
            "Elven Mace",
            "Elven Sword",
            "Elven War Axe",
            "Elven Warhammer",
            "Glass Battleaxe",
            "Glass Bow",
            "Glass Dagger",
            "Glass Greatsword",
            "Glass Mace",
            "Glass Sword",
            "Glass War Axe",
            "Glass Warhammer",
            "Golden Battleaxe",
            "Golden Bow",
            "Golden Dagger",
            "Golden Greatsword",
            "Golden Mace",
            "Golden Sword",
            "Golden War Axe",
            "Golden Warhammer",
            "Honed Ancient Nord Warhammer",
            "Hunting Bow",
            "Iron Battleaxe",
            "Iron Dagger",
            "Iron Greatsword",
            "Iron Mace",
            "Iron Sword",
            "Iron War Axe",
            "Iron Warhammer",
            "Long Bow",
            "Madness Battleaxe",
            "Madness Bow",
            "Madness Dagger",
            "Madness Greatsword",
            "Madness Mace",
            "Madness Sword",
            "Madness War Axe",
            "Madness Warhammer",
            "Nord Hero Battle Axe",
            "Nord Hero Bow",
            "Nord Hero Dagger",
            "Nord Hero Greatsword",
            "Nord Hero Mace",
            "Nord Hero Sword",
            "Nord Hero War Axe",
            "Nord Hero Warhammer",
            "Nordic Battleaxe",
            "Nordic Bow",
            "Nordic Dagger",
            "Nordic Greatsword",
            "Nordic Mace",
            "Nordic Sword",
            "Nordic War Axe",
            "Nordic Warhammer",
            "Orcish Battleaxe",
            "Orcish Bow",
            "Orcish Dagger",
            "Orcish Greatsword",
            "Orcish Mace",
            "Orcish Sword",
            "Orcish War Axe",
            "Orcish Warhammer",
            "Skyforge Steel Battleaxe",
            "Skyforge Steel Dagger",
            "Skyforge Steel Greatsword",
            "Skyforge Steel Sword",
            "Skyforge Steel War Axe",
            "Stalhrim Battleaxe",
            "Stalhrim Bow",
            "Stalhrim Dagger",
            "Stalhrim Greatsword",
            "Stalhrim Mace",
            "Stalhrim Sword",
            "Stalhrim War Axe",
            "Stalhrim Warhammer",
            "Steel Battleaxe",
            "Steel Dagger",
            "Steel Greatsword",
            "Steel Mace",
            "Steel Sword",
            "Steel War Axe",
            "Steel Warhammer",
        ]

    @functools.cached_property
    def weapons_anniversary(self) -> List[str]:
        return [
            "Daedric Crossbow",
            "Dragonbone Crossbow",
            "Ebony Crossbow",
            "Ebony Scimitar",
            "Elven Crossbow",
            "Glass Crossbow",
            "Imperial Crossbow",
            "Irkngthand War Axe",
            "Nordic Crossbow",
            "Orcish Crossbow",
            "Remnant Scimitar",
            "Silver Crossbow",
            "Stalhrim Crossbow",
        ]

    def weapons(self) -> List[str]:
        weapons: List[str] = self.weapons_base[:]

        if self.has_anniversary_upgrade:
            weapons.extend(self.weapons_anniversary)

        return sorted(weapons)

    @staticmethod
    def books() -> List[str]:
        return [
            "16 Accords of Madness, v. VI",
            "16 Accords of Madness, v. IX",
            "16 Accords of Madness, v. XII",
            "2920, Morning Star, v1",
            "2920, Sun's Dawn, v2",
            "2920, First Seed, v3",
            "2920, Rain's Hand, v4",
            "2920, Second Seed, v5",
            "2920, MidYear, v6",
            "2920, Sun's Height, v7",
            "2920, Last Seed, v8",
            "2920, Hearth Fire, v9",
            "2920, Frostfall, v10",
            "2920, Sun's Dusk, v11",
            "2920, Evening Star, v12",
            "An Accounting of the Scrolls",
            "The Adabal-a",
            "Admonition Against Ebony",
            "Adonato's Book",
            "Advances in Lockpicking",
            "Adventurer's Journal",
            "Aedra and Daedra",
            "The Aetherium Wars",
            "Aevar Stone-Singer",
            "Agrius's Journal",
            "Ahzidal's Descent",
            "Ahzirr Traajijazeri",
            "Aicantar's Lab Journal",
            "Alchemist's Journal",
            "Alduin is Real",
            "The Alduin/Akatosh Dichotomy",
            "Alva's Journal",
            "Amongst the Draugr",
            "The Amulet of Kings",
            "Ancestors and the Dunmer",
            "Annals of the Dragonguard",
            "Antecedants of Dwemer Law",
            "The Anticipations",
            "The Apprentice's Assistant",
            "Arcana Restored",
            "The Arcturian Heresy",
            "Argonian Account, Book 1",
            "Argonian Account, Book 2",
            "Argonian Account, Book 3",
            "Argonian Account, Book 4",
            "The Armorer's Challenge",
            "Arondil's Journal, Part 1",
            "Arondil's Journal, Part 2",
            "Arondil's Journal, Part 3",
            "Arondil's Journal, Part 4",
            "The Art of War Magic",
            "Arvel's Journal",
            "Atlas of Dragons",
            "Atronach Forge Manual",
            "The Axe Man",
            "Azura and the Box",
            "Bandit Leader's Journal",
            "Bandit's Journal",
            "Battle of Red Mountain",
            "Battle of Sancre Tor",
            "The Bear of Markarth",
            "Before the Ages of Man",
            "Beggar",
            "Beggar Prince",
            "The Beginner's Guide to Homesteading",
            "The Betrayed",
            "Biography of Barenziah, v1",
            "Biography of Barenziah, v2",
            "Biography of Barenziah, v3",
            "Biography of the Wolf Queen",
            "The Black Arrow, v1",
            "The Black Arrow, v2",
            "The Black Arts On Trial",
            "Black Book: Epistolary Acumen",
            "Black Book: Filament and Filigree",
            "Black Book: The Hidden Twilight",
            "Black Book: The Sallow Regent",
            "Black Book: Untold Legends",
            "Black Book: Waking Dreams",
            "Black Book: The Winds of Change",
            "Boethiah's Glory",
            "Boethiah's Proving",
            "Bone, Part I",
            "Bone, Part II",
            "The Book of Daedra",
            "The Book of Fate",
            "The Book of the Dragonborn",
            "The Book of Life and Service",
            "Breathing Water",
            "Brief History of the Empire, v1",
            "Brief History of the Empire, v2",
            "Brief History of the Empire, v3",
            "Brief History of the Empire, v4",
            "Brothers of Darkness",
            "Butcher Journal #1",
            "Butcher Journal #2",
            "Butcher Journal",
            "The Buying Game",
            "The Cabin in the Woods",
            "The Cake and The Diamond",
            "Catalogue of Armor Enchantments",
            "Catalogue of Weapon Enchantments",
            "Cats of Skyrim",
            "Chance's Folly",
            "Changed Ones",
            "Charwich-Koniinge Letters, v1",
            "Charwich-Koniinge Letters, v3",
            "Charwich-Koniinge Letters, v4",
            "Charwich-Koniinge, v2",
            "Chaurus Pie: A Recipe",
            "Cherim's Heart",
            "Children of the Sky",
            "A Children's Anuad",
            "Children of the All-Maker",
            "Chimarvamidium",
            "Chronicles of Nchuleft",
            "Cicero's Journal - Final Volume",
            "Cicero's Journal - Volume 1",
            "Cicero's Journal - Volume 2",
            "Cicero's Journal - Volume 3",
            "Cicero's Journal - Volume 4",
            "The City of Stone",
            "Cleansing of the Fane",
            "The Code of Malacath",
            "Confessions of a Dunmer Skooma Eater",
            "Confessions Of A Khajiit Fur Trader",
            "Cook's Journal",
            "A Dance in Fire, v1",
            "A Dance in Fire, v2",
            "A Dance in Fire, v3",
            "A Dance in Fire, v4",
            "A Dance in Fire, v5",
            "A Dance in Fire, v6",
            "A Dance in Fire, v7",
            "Darkest Darkness",
            "Daughter of the Niben",
            "Daynas Valen's Journal",
            "Daynas Valen's Notes",
            "De Rerum Dirennis",
            "Death Blow of Abernanit",
            "Death of a Wanderer",
            "Deathbrand",
            "Decree of Monument",
            "Diary of Faire Agarwen",
            "Discovering Ruunvald, Vol. I",
            "Discovering Ruunvald, Vol. II",
            "Discovering Ruunvald, Vol. III",
            "Discovering Ruunvald, Vol. IV",
            "The Doors of the Spirit",
            "The Doors of Oblivion",
            "The Dowry",
            "The Dragon Break",
            "Dragon Language: Myth no More",
            "The Dragon War",
            "A Dream of Sovngarde",
            "The Dreamstride",
            "Dunmer of Skyrim",
            "Dwarves, v1",
            "Dwarves, v2",
            "Dwarves, v3",
            "Dwemer History and Culture",
            "Dwemer Inquiries Vol I",
            "Dwemer Inquiries Vol II",
            "Dwemer Inquiries Vol III",
            "Effects of the Elder Scrolls",
            "Eisa's Journal",
            "Enchanter's Primer",
            "Endrast's Journal",
            "Erj's Notes",
            "The Exodus",
            "Expedition Manifest",
            "An Explorer's Guide to Skyrim",
            "Eydis's Journal",
            "Faded Diary",
            "Fall from Glory",
            "Fall of the Snow Prince",
            "The Falmer: A Study",
            "Father Of The Niben",
            "Feyfolken I",
            "Feyfolken II",
            "Feyfolken III",
            "Final Lesson",
            "Fire and Darkness",
            "The Firmament",
            "The Firsthold Revolt",
            "Fisherman's Journal",
            "Five Songs of King Wulfharth",
            "The Five Far Stars",
            "Flight from the Thalmor",
            "Forge, Hammer and Anvil",
            "The Four Totems of Volskygge",
            "Fragment: On Artaeum",
            "Frontier, Conquest",
            "Galerion The Mystic",
            "Gallus's Encoded Journal",
            "A Game at Dinner",
            "A Gentleman's Guide to Whiterun",
            "Ghosts in the Storm",
            "Glories and Laments",
            "Gods and Worship",
            "The Gold Ribbon of Merit",
            "Gratian's Journal",
            "Great Harbingers",
            "The Great War",
            "The Guardian and the Traitor",
            "Guide to Better Thieving",
            "Habd's Journal",
            "Hajvarr's Journal",
            "Hallgerd's Tale",
            "Hamelyn's Journal",
            "Hanging Gardens",
            "Hargar's Journal",
            "Harvesting Frostbite Spider Venom",
            "Heavy Armor Forging",
            "Heddic's Volunruud Notes",
            "Herbalist's Guide to Skyrim",
            "Herbane's Bestiary: Automatons",
            "Herbane's Bestiary: Hagravens",
            "Herbane's Bestiary: Ice Wraiths",
            "History of Raven Rock, Vol. I",
            "History of Raven Rock, Vol. II",
            "History of Raven Rock, Vol. III",
            "Holdings of Jarl Gjalund",
            "The Holds of Skyrim",
            "The Hope of the Redoran",
            "Horker Attacks",
            "Horror of Castle Xyr",
            "The House of Troubles",
            "Hrodulf's Journal",
            "Hunter's Journal",
            "A Hypothetical Treachery",
            "Ice and Chitin",
            "Ildari's Journal",
            "Ildari's Journal, vol. I",
            "Ildari's Journal, vol. II",
            "Ildari's Journal, vol. III",
            "Immortal Blood",
            "Imperial Missive",
            "Imperial Report on Saarthal",
            "The Importance of Where",
            "Incident at Necrom",
            "Invocation of Azura",
            "J'zhar's Journal",
            "Japhet's Journal",
            "Jornibret's Last Dance",
            "Journal",
            "Journal of Drokt",
            "Journal of Mirtil Angoth",
            "The Journal of Ralis Sedarys - Volume 19",
            "The Journal of Ralis Sedarys - Volume 20",
            "The Journal of Ralis Sedarys - Volume 21",
            "The Journal of Ralis Sedarys - Volume 22",
            "The Journal of Ralis Sedarys - Volume 23",
            "Karan's Journal",
            "Katria's Journal",
            "The Keepers of the Razor",
            "Killing - Before You're Killed",
            "King",
            "King Olaf's Verse",
            "A Kiss, Sweet Mother",
            "The Knights of the Nine",
            "Kodlak's Journal",
            "Kolb & the Dragon",
            "Krag's Journal",
            "Kyr's Log",
            "Last King of the Ayleids",
            "The Last King of the Ayleids",
            "Last Scabbard of Akrash",
            "Legend of Krately House",
            "The Legend of Red Eagle",
            "The Legendary Sancre Tor",
            "The Legendary Scourge",
            "Life of Uriel Septim VII",
            "Light Armor Forging",
            "Liminal Bridges",
            "Lives of the Saints",
            "The Locked Room",
            "Lost Legends",
            "Love Poem",
            "Lu-ah's Journal",
            "The Lunar Lorkhan",
            "The Lusty Argonian Maid, v1",
            "The Lusty Argonian Maid, v2",
            "Lusty Argonian Maid Folio",
            "Lycanthropic Legends of Skyrim",
            "Lymdrenn Tenvanni's Journal",
            "Mace Etiquette",
            "The 'Madmen' of the Reach",
            "The Madness of Pelagius",
            "Magic from the Sky",
            "Maluril's Journal",
            "Malyn Varen's Grimoire",
            "Mannimarco, King of Worms",
            "Margret's Journal",
            "Markarth Home Decorating Guide",
            "The Marksmanship Lesson",
            "Master Illusion Text",
            "Medresi's Notes",
            "Merchant's Journal",
            "Merilar's Journal",
            "Midden Incident Report",
            "Miner's Journal",
            "A Minor Maze",
            "Minorne",
            "The Mirror",
            "Mixed Unit Tactics",
            "The Monomyth",
            "Mysterious Akavir",
            "Mystery of Talara, v 1",
            "Mystery of Talara, v 2",
            "Mystery of Talara, Part 4",
            "Mystery of Talara, v3",
            "Mystery of Talara, v5",
            "Mythic Dawn Commentaries 1",
            "Mythic Dawn Commentaries 2",
            "Mythic Dawn Commentaries 3",
            "Mythic Dawn Commentaries 4",
            "Myths of Sheogorath",
            "N'Gasta! Kvata! Kvakis!",
            "Nchunak's Fire and Faith",
            "Nepos's Journal",
            "Nerevar at Red Mountain",
            "Nerevar Moon and Star",
            "Night Falls on Sentinel",
            "The Night Mother's Truth",
            "Night of Tears",
            "Nightingales: Fact or Fiction?",
            "The Nightingales Vol. 1",
            "The Nightingales Vol. 2",
            "The Nirnroot Missive",
            "Nords Arise!",
            "Nords of Skyrim",
            "Notes on Dimhollow Crypt, Vol. 3",
            "Notes On The Lunar Forge",
            "Notes on Yngol Barrow",
            "Nystrom's Journal",
            "The Oblivion Crisis",
            "Ode To The Tundrastriders",
            "Of Crossed Daggers",
            "Of Fjori and Holgeir",
            "Oghma Infinium",
            "Olaf and the Dragon",
            "Old Tome",
            "The Old Ways",
            "On Apocrypha: Boneless Limbs",
            "On Apocrypha: Delving Pincers",
            "On Apocrypha: Gnashing Blades",
            "On Apocrypha: Prying Orbs",
            "On Oblivion",
            "On Stepping Lightly",
            "On the Great Collapse",
            "Opusculus Lamae Bal",
            "Orsinium and the Orcs",
            "Palla, volume 1",
            "Palla, volume 2",
            "Pension of the Ancestor Moth",
            "Physicalities of Werewolves",
            "The Pig Children",
            "Pirate King of the Abecean",
            "The Poison Song, Book I",
            "The Poison Song, Book II",
            "The Poison Song, Book III",
            "The Poison Song, Book IV",
            "The Poison Song, Book V",
            "The Poison Song, Book VI",
            "The Poison Song, Book VII",
            "The Posting of the Hunt",
            "Power of the Elements",
            "Proper Lock Design",
            "Purloined Shadows",
            "Racial Phylogeny",
            "Raleth Eldri's Notes on Kagrumez",
            "Ramati's Journal",
            "The Ransom of Zarek",
            "The Real Barenziah, v1",
            "The Real Barenziah, v2",
            "The Real Barenziah, v3",
            "The Real Barenziah, v4",
            "The Real Barenziah, v5",
            "Reality & Other Falsehoods",
            "The Rear Guard",
            "The Reclamations",
            "The Red Book of Riddles",
            "Red Eagle's Rite",
            "The Red Kitchen Reader",
            "The Red Year, Vol. I",
            "The Red Year, Vol. II",
            "The Refugees",
            "Remanada",
            "Report: Disaster at Ionith",
            "Research Log",
            "Research Notes",
            "Response to Bero's Speech",
            "Riften Home Decorating Guide",
            "The Rise and Fall of the Blades",
            "Rising Threat, Vol. I",
            "Rising Threat, Vol. II",
            "Rising Threat, Vol. III",
            "Rising Threat, Vol. IV",
            "Rislav The Righteous",
            "Ruined Trailbook",
            "Ruins of Kemel-Ze",
            "Ruminations on the Elder Scrolls",
            "Runil's Journal",
            "Sacred Witness",
            "Saden's Journal",
            "Saint Jiub's Opus",
            "Scourge of the Gray Quarter",
            "The Seed",
            "Servos' Journal",
            "Shadowmarks",
            "Shalidor's Insights",
            "Shezarr and the Divines",
            "Short History of Morrowind",
            "Sild's Journal",
            "Sinderion's Field Journal",
            "Sithis",
            "Skorm Snow-Strider's Journal",
            "Skyrim's Rule",
            "Smuggler's Journal",
            "Solitude Home Decorating Guide",
            "Song Of Hrormir",
            "Song of the Alchemists",
            "Song of the Askelde Men",
            "The Song of Pelinal, v1",
            "The Song of Pelinal, v2",
            "The Song of Pelinal, v3",
            "The Song of Pelinal, v4",
            "The Song of Pelinal, v5",
            "The Song of Pelinal, v6",
            "The Song of Pelinal, v7",
            "The Song of Pelinal, v8",
            "Songs of Skyrim",
            "Songs of Skyrim: Revised",
            "Songs of the Return, Vol 2",
            "Songs of the Return, Vol 7",
            "Songs of the Return, Vol 19",
            "Songs of the Return, vol 24",
            "Songs of the Return, Vol 56",
            "Souls, Black and White",
            "Sovngarde: A Reexamination",
            "Spider Experiment Notes",
            "Spirit of Nirn",
            "Spirit of the Daedra",
            "Staubin's Diary",
            "Stromm's Diary",
            "Sudi's Journal",
            "Sulla's Journal",
            "The Sultry Argonian Bard, v1",
            "Surfeit of Thieves",
            "Suvaris Atheron's Logbook",
            "The Tale of Dro'Zira",
            "The Talos Mistake",
            "Tamrielic Lore: Revised",
            "Tattered Journal",
            "Thalmor Dossier: Delphine",
            "Thalmor Dossier: Esbern",
            "Thalmor Dossier: Ulfric Stormcloak",
            "There Be Dragons",
            "Thief",
            "Thief of Virtue",
            "The Third Door",
            "The Third Era Timeline",
            "Thirsk, A Revised History",
            "Thonar's Journal",
            "Three Thieves",
            "The Totems of Hircine",
            "Touching the Sky",
            "A Tragedy in Black",
            "Trap",
            "Treatise on Ayleidic Cities",
            "Trials of St. Alessia",
            "Troll Slaying",
            "The True Nature of Orcs",
            "The True Noble's Code",
            "Twin Secrets",
            "Ulfr's Book",
            "Ulyn's Journal",
            "Umana's Journal",
            "Uncommon Taste",
            "Uncommon Taste - Signed",
            "Unknown Book, Vol. I",
            "Unknown Book, Vol. II",
            "Unknown Book, Vol. III",
            "Unknown Book, Vol. IV",
            "Valerica's Journal",
            "Varieties of Daedra",
            "Varieties of Faith in the Empire",
            "Venarus Vulpin's Journal",
            "Venarus Vulpin's Research",
            "Vernaccus and Bourlor",
            "Volk's Journal",
            "Wabbajack",
            "Walking the World, Vol XI",
            "War of the First Council",
            "Warrior",
            "The Warrior's Charge",
            "Watcher of Stones",
            "The Waters of Oblivion",
            "Where were you when the Dragon Broke",
            "Whiterun Home Decorating Guide",
            "The Wild Elves",
            "Wind and Sand",
            "Windhelm Home Decorating Guide",
            "The Windhelm Letters",
            "The Wispmother",
            "Withershins",
            "The Wolf Queen, v1",
            "The Wolf Queen, v2",
            "The Wolf Queen, v3",
            "The Wolf Queen, v4",
            "The Wolf Queen, v5",
            "The Wolf Queen, v6",
            "The Wolf Queen, v7",
            "The Wolf Queen, v8",
            "The Woodcutter's Wife",
            "Words and Philosophy",
            "Words of Clan Mother Ahnissi",
            "Words of the Wind",
            "Wraith's Wedding Dowry",
            "Wyndelius's Journal",
            "Yellow Book of Riddles",
            "Yngol and the Sea-Ghosts",
        ]

    @staticmethod
    def books_skill() -> List[str]:
        return [
            "2920, Morning Star, v1",
            "2920, Sun's Dawn, v2",
            "2920, Rain's Hand, v4",
            "2920, Second Seed, v5",
            "2920, MidYear, v6",
            "2920, Last Seed, v8",
            "2920, Hearth Fire, v9",
            "2920, Frostfall, v10",
            "Advances in Lockpicking",
            "Aevar Stone-Singer",
            "The Armorer's Challenge",
            "The Art of War Magic",
            "Battle of Red Mountain",
            "Battle of Sancre Tor",
            "Before the Ages of Man",
            "Beggar",
            "Biography of the Wolf Queen",
            "The Black Arrow, v2",
            "The Black Arts On Trial",
            "Breathing Water",
            "The Buying Game",
            "Catalogue of Armor Enchantments",
            "Catalogue of Weapon Enchantments",
            "Cherim's Heart",
            "Chimarvamidium",
            "A Dance in Fire, v2",
            "A Dance in Fire, v6",
            "A Dance in Fire, v7",
            "Daughter of the Niben",
            "De Rerum Dirennis",
            "Death Blow of Abernanit",
            "The Doors of Oblivion",
            "Enchanter's Primer",
            "The Exodus",
            "Father Of The Niben",
            "Fire and Darkness",
            "A Game at Dinner",
            "The Gold Ribbon of Merit",
            "Guide to Better Thieving",
            "Hallgerd's Tale",
            "Heavy Armor Forging",
            "Herbalist's Guide to Skyrim",
            "Horror of Castle Xyr",
            "A Hypothetical Treachery",
            "Ice and Chitin",
            "The Importance of Where",
            "Incident at Necrom",
            "Jornibret's Last Dance",
            "King",
            "The Knights of the Nine",
            "Last Scabbard of Akrash",
            "Legend of Krately House",
            "The Legendary Sancre Tor",
            "Light Armor Forging",
            "Liminal Bridges",
            "The Locked Room",
            "The Lunar Lorkhan",
            "Mace Etiquette",
            "Mannimarco, King of Worms",
            "The Marksmanship Lesson",
            "The Mirror",
            "Mystery of Talara, v 2",
            "Mystery of Talara, Part 4",
            "Mystery of Talara, v3",
            "Night Falls on Sentinel",
            "Orsinium and the Orcs",
            "Proper Lock Design",
            "Purloined Shadows",
            "Racial Phylogeny",
            "Reality & Other Falsehoods",
            "The Rear Guard",
            "The Red Kitchen Reader",
            "The Refugees",
            "Response to Bero's Speech",
            "Rising Threat, Vol. IV",
            "Rislav The Righteous",
            "Sacred Witness",
            "Sithis",
            "Song Of Hrormir",
            "Song of the Alchemists",
            "Surfeit of Thieves",
            "Thief",
            "Three Thieves",
            "A Tragedy in Black",
            "Twin Secrets",
            "Vernaccus and Bourlor",
            "Warrior",
            "The Warrior's Charge",
            "Withershins",
            "The Wolf Queen, v1",
            "Words and Philosophy",
        ]

    @staticmethod
    def clutter_count_range() -> range:
        return range(3, 9)

    @staticmethod
    def clutter() -> List[str]:
        return [
            "Basket",
            "Bellows",
            "Bloody Rags",
            "Bloody Tankard",
            "Bowl",
            "Bucket",
            "Burned Book",
            "Candlestick",
            "Cast Iron Pot",
            "Clothes Iron",
            "Cup",
            "Dibella Statue",
            "Drum",
            "Dwemer Bowl",
            "Dwemer Cup",
            "Dwemer Dish",
            "Dwemer Pan",
            "Dwemer Plate",
            "Flagon",
            "Flute",
            "Fork",
            "Glazed Urn",
            "Goblet",
            "Hammer",
            "Inkwell",
            "Jug",
            "Kettle",
            "Knife",
            "Lantern",
            "Lute",
            "Pitchfork",
            "Plate",
            "Platter",
            "Pot",
            "Quill",
            "Saw",
            "Shovel",
            "Silver Goblet",
            "Silver Jug",
            "Spigot",
            "Spoon",
            "Tankard",
            "Tongs",
            "Torture Tools",
            "Wooden Bowl",
            "Wooden Ladle",
            "Wooden Plate",
        ]

    @functools.cached_property
    def spells_base(self) -> List[str]:
        return [
            "Ash Rune",
            "Ash Shell",
            "Bane of the Undead",
            "Banish Daedra",
            "Blizzard",
            "Bound Battleaxe",
            "Bound Bow",
            "Bound Dagger",
            "Bound Sword",
            "Call to Arms",
            "Calm",
            "Candlelight",
            "Chain Lightning",
            "Circle of Protection",
            "Clairvoyance",
            "Close Wounds",
            "Command Daedra",
            "Conjure Ash Guardian",
            "Conjure Ash Spawn",
            "Conjure Boneman",
            "Conjure Dark Seducer Archer",
            "Conjure Dark Seducer Warrior",
            "Conjure Dragon Priest",
            "Conjure Dremora Lord",
            "Conjure Familiar",
            "Conjure Flame Atronach",
            "Conjure Frost Atronach",
            "Conjure Golden Saint Archer",
            "Conjure Golden Saint Warrior",
            "Conjure Mistman",
            "Conjure Seeker",
            "Conjure Staada",
            "Conjure Storm Atronach",
            "Conjure Wrathman",
            "Courage",
            "Dead Thrall",
            "Detect Dead",
            "Detect Life",
            "Dragonhide",
            "Dread Zombie",
            "Ebonyflesh",
            "Equilibrium",
            "Expel Daedra",
            "Fast Healing",
            "Fear",
            "Fire Rune",
            "Fire Storm",
            "Fireball",
            "Firebolt",
            "Flame Cloak",
            "Flame Thrall",
            "Flaming Familiar",
            "Freeze",
            "Frenzy Rune",
            "Frenzy",
            "Frost Cloak",
            "Frost Rune",
            "Frost Thrall",
            "Frostbite",
            "Fury",
            "Grand Healing",
            "Greater Ward",
            "Guardian Circle",
            "Harmony",
            "Heal Other",
            "Heal Undead",
            "Healing Hands",
            "Hysteria",
            "Ice Spike",
            "Ice Storm",
            "Icy Spear",
            "Ignite",
            "Incinerate",
            "Invisibility",
            "Ironflesh",
            "Lesser Ward",
            "Lightning Bolt",
            "Lightning Cloak",
            "Lightning Rune",
            "Lightning Storm",
            "Magelight",
            "Mass Paralysis",
            "Mayhem",
            "Muffle",
            "Necromantic Healing",
            "Oakflesh",
            "Pacify",
            "Paralyze",
            "Poison Rune",
            "Raise Zombie",
            "Rally",
            "Reanimate Corpse",
            "Repel Lesser Undead",
            "Repel Undead",
            "Revenant",
            "Rout",
            "Soul Trap",
            "Sparks",
            "Steadfast Ward",
            "Stendarr's Aura",
            "Stoneflesh",
            "Storm Thrall",
            "Summon Arniel's Shade",
            "Summon Arvak",
            "Sun Fire",
            "Telekinesis",
            "Thunderbolt",
            "Transmute",
            "Turn Greater Undead",
            "Turn Lesser Undead",
            "Turn Undead",
            "Vampire's Bane",
            "Wall of Flames",
            "Wall of Frost",
            "Wall of Storms",
            "Waterbreathing",
            "Whirlwind Cloak",
        ]

    @functools.cached_property
    def spells_anniversary(self) -> List[str]:
        return [
            "Banish Undead",
            "Bound Quiver",
            "Choking Grasp",
            "Conjure Ancient Deathpriest",
            "Conjure Ayleid Lich",
            "Conjure Bone Colossus",
            "Conjure Cursed Spectre",
            "Conjure Foul Zombie",
            "Conjure Haunting Spirit",
            "Conjure Malignant Zombie",
            "Conjure Putrid Zombie",
            "Conjure Skeleton Champion",
            "Conjure Skeleton Marksman",
            "Conjure Skeleton Minion",
            "Conjure Skeleton Warlock",
            "Conjure Tomb Guardian",
            "Conjure Undying Ghost",
            "Conjure Zombie",
            "Elemental Blast",
            "Elemental Bolt",
            "Elemental Burst",
            "Elemental Flare",
            "Fenrik's Welcome",
            "Hangman's Noose",
            "Mara's Wrath",
            "Master Transmute",
            "Necromancer's Ritual",
            "Orum's Aquatic Escape",
            "Paralysis Rune",
            "Pride of Hirstaang",
            "Soul Split",
            "Strangulation",
            "Summon Daedric Horse",
            "Telekinesis Arrows",
            "Touch of Death",
            "Unbounded Flames",
            "Unbounded Freezing",
            "Unbounded Storms",
        ]

    def spells(self) -> List[str]:
        spells: List[str] = self.spells_base[:]

        if self.has_anniversary_upgrade:
            spells.extend(self.spells_anniversary)

        return sorted(spells)

    @functools.cached_property
    def blessings_base(self) -> List[str]:
        return [
            "Blessing of Akatosh",
            "Blessing of Arkay",
            "Blessing of AurielDG",
            "Blessing of Dibella",
            "Blessing of Julianos",
            "Blessing of Kynareth",
            "Blessing of Mara",
            "Blessing of Nocturnal",
            "Blessing of Stendarr",
            "Blessing of Talos",
            "Blessing of Zenithar",
            "Blessing of Azura",
            "Blessing of Boethiah",
            "Blessing of Mephala",
        ]

    @functools.cached_property
    def blessings_anniversary(self) -> List[str]:
        return [
            "Blessing of Almalexia",
            "Blessing of Sotha Sil",
            "Blessing of Vivec",
            "Blessing of Vaermina",
        ]

    def blessings(self) -> List[str]:
        blessings: List[str] = self.blessings_base[:]

        if self.has_anniversary_upgrade:
            blessings.extend(self.blessings_anniversary)

        return sorted(blessings)

    @staticmethod
    def words_of_power() -> List[str]:
        return [
            "Ah",
            "Aus",
            "Bah",
            "Dah",
            "Diin",
            "Diiv",
            "Dov",
            "Drem",
            "Dun",
            "Dur",
            "Faas",
            "Feim",
            "Fo",
            "Frul",
            "Fus",
            "Gaan",
            "Gaar",
            "Gol",
            "Grah",
            "Gron",
            "Gut",
            "Haal",
            "Haas",
            "Hah",
            "Hun",
            "Iiz",
            "Joor",
            "Kaal",
            "Kaan",
            "Kest",
            "Klo",
            "Koor",
            "Krah",
            "Krii",
            "Laas",
            "Lah",
            "Lok",
            "Lun",
            "Maar",
            "Mey",
            "Mid",
            "Mir",
            "Mul",
            "Nah",
            "Neh",
            "Nir",
            "Nos",
            "Nus",
            "Od",
            "Ov",
            "Qah",
            "Qo",
            "Raan",
            "Rii",
            "Ro",
            "Ru",
            "Shaan",
            "Shul",
            "Slen",
            "Strun",
            "Su",
            "Tah",
            "Tiid",
            "Toor",
            "Ul",
            "Vaaz",
            "Vah",
            "Ven",
            "Viik",
            "Viing",
            "Viir",
            "Vur",
            "Wuld",
            "Yah",
            "Yol",
            "Zah",
            "Zii",
            "Zol",
            "Zoor",
            "Zul",
            "Zun",
        ]

    @staticmethod
    def dragon_shouts() -> List[str]:
        return [
            "Animal Allegiance (Raan Mir Tah)",
            "Aura Whisper (Laas Yah Nir)",
            "Battle Fury (Mid Vur Shaan)",
            "Become Ethereal (Feim Zii Gron)",
            "Bend Will (Gol Hah Dov)",
            "Call Dragon (Od Ah Viing)",
            "Call of Valor (Hun Kaal Zoor)",
            "Clear Skies (Lok Vah Koor)",
            "Cyclone (Gaan Lah Haas)",
            "Disarm (Zun Haal Viik)",
            "Dismay (Faas Ru Maar)",
            "Dragon Aspect (Mul Qah Diiv)",
            "Dragonrend (Joor Zah Frul)",
            "Drain Vitality (Gaan Lah Haas)",
            "Elemental Fury (Su Grah Dun)",
            "Fire Breath (Yol Toor Shul)",
            "Frost Breath (Fo Krah Diin)",
            "Ice Form (Iiz Slen Nus)",
            "Kyne's Peace (Kaan Drem Ov)",
            "Marked for Death (Krii Lun Aus)",
            "Slow Time (Tiid Klo Ul)",
            "Soul Tear (Rii Vaaz Zol)",
            "Storm Call (Strun Bah Qo)",
            "Summon Durnehviir (Dur Neh Viir)",
            "Throw Voice (Zul Mey Gut)",
            "Unrelenting Force (Fus Ro Dah)",
            "Whirlwind Sprint (Wuld Nah Kest)",
        ]

    @staticmethod
    def gold_count_range() -> range:
        return range(25000, 500001, 5000)

    @functools.cached_property
    def enemies_base(self) -> List[str]:
        return [
            "Afflicted",
            "Bandit",
            "Bandit Outlaw",
            "Bandit Thug",
            "Bandit Highwayman",
            "Bandit Plunderer",
            "Bandit Marauder",
            "Novice Conjurer",
            "Apprentice Conjurer",
            "Conjurer Adept",
            "Conjurer",
            "Ascendant Conjurer",
            "Master Conjurer",
            "Arch Conjurer",
            "Cultist",
            "Cultist Adept",
            "Ascendant Cultist",
            "Master Cultist",
            "Arch Cultist",
            "Dark Seducer Warrior",
            "Dark Seducer Archer",
            "Dremora Churl",
            "Dremora Caitiff",
            "Dremora Kynval",
            "Dremora Kynreeve",
            "Dremora Markynaz",
            "Dremora Valkynaz",
            "Falmer Servant",
            "Forsworn",
            "Forsworn Shaman",
            "Forsworn Forager",
            "Forsworn Looter",
            "Forsworn Pillager",
            "Forsworn Ravager",
            "Forsworn Briarheart",
            "Golden Saint Warrior",
            "Golden Saint Archer",
            "Hired Thug",
            "Lowlife",
            "Haknir's Crew",
            "Mogrul's Thug",
            "Morag Tong Assassin",
            "Novice Necromancer",
            "Apprentice Necromancer",
            "Necromancer Adept",
            "Necromage",
            "Ascendant Necromancer",
            "Master Necromancer",
            "Arch Necromancer",
            "Pirate",
            "Reaver",
            "Reaver Outlaw",
            "Reaver Thug",
            "Reaver Highwayman",
            "Reaver Plunderer",
            "Reaver Marauder",
            "Spellsword",
            "Vagrant",
            "Vampire Fledgling",
            "Vampire",
            "Blooded Vampire",
            "Vampire Mistwalker",
            "Vampire Nightstalker",
            "Ancient Vampire",
            "Volkihar Vampire",
            "Nightlord Vampire",
            "Master Vampire",
            "Volkihar Master Vampire",
            "Nightmaster Vampire",
            "Novice Fire Mage",
            "Apprentice Fire Mage",
            "Fire Mage Adept",
            "Fire Mage",
            "Fire Wizard",
            "Pyromancer",
            "Arch Pyromancer",
            "Novice Ice Mage",
            "Apprentice Ice Mage",
            "Ice Mage Adept",
            "Ice Mage",
            "Ice Wizard",
            "Cryomancer",
            "Arch Cryomancer",
            "Novice Storm Mage",
            "Apprentice Storm Mage",
            "Storm Mage Adept",
            "Storm Mage",
            "Storm Wizard",
            "Electromancer",
            "Arch Electromancer",
            "Werebear",
            "Werewolf",
            "Werewolf Savage",
            "Werewolf Brute",
            "Werewolf Skinwalker",
            "Werewolf Beastmaster",
            "Werewolf Vargr",
            "Mammoth",
            "Skeever",
            "Slaughterfish",
            "Ash Guardian",
            "Ash Spawn",
            "Flame Atronach",
            "Potent Flame Atronach",
            "Flame Thrall",
            "Frost Atronach",
            "Potent Frost Atronach",
            "Frost Thrall",
            "Storm Atronach",
            "Potent Storm Atronach",
            "Storm Thrall",
            "Lurker",
            "Lurker Guardian",
            "Lurker Sentinel",
            "Lurker Vindicator",
            "Seeker",
            "Seeker Aspirant",
            "High Seeker",
            "Dwarven Spider Worker",
            "Dwarven Spider",
            "Dwarven Spider Guardian",
            "Dwarven Sphere",
            "Dwarven Sphere Guardian",
            "Dwarven Sphere Master",
            "Tempered Sphere",
            "Dwarven Centurion",
            "Dwarven Centurion Guardian",
            "Dwarven Centurion Master",
            "Dwarven Ballista",
            "Dwarven Ballista Guardian",
            "Dwarven Ballista Master",
            "Chaurus",
            "Chaurus Reaper",
            "Chaurus Hunter",
            "Chaurus Hunter Fledgling",
            "Dragon",
            "Blood Dragon",
            "Frost Dragon",
            "Elder Dragon",
            "Ancient Dragon",
            "Serpentine Dragon",
            "Revered Dragon",
            "Legendary Dragon",
            "Falmer",
            "Falmer Skulker",
            "Falmer Gloomlurker",
            "Falmer Nightprowler",
            "Falmer Shadowmaster",
            "Falmer Warmonger",
            "Frozen Vampire Falmer",
            "Frozen Falmer Shaman",
            "Frostbite Spider",
            "Giant Frostbite Spider",
            "Giant",
            "Hagraven",
            "Ice Wraith",
            "Spriggan",
            "Spriggan Matron",
            "Burnt Spriggan",
            "Spriggan Earth Mother",
            "Corrupted Spriggan",
            "Troll",
            "Armored Troll",
            "Frost Troll",
            "Armored Frost Troll",
            "Wisp",
            "Shade",
            "Wispmother",
            "Elytra Nymph",
            "Gargoyle",
            "Gargoyle Brute",
            "Gargoyle Sentinel",
            "Riekling",
            "Riekling Scout",
            "Riekling Hunter",
            "Riekling Warrior",
            "Mounted Riekling",
            "Riekling Rider",
            "Riekling Courser",
            "Riekling Charger",
            "Death Hound",
            "Dragon Priest",
            "Draugr",
            "Restless Draugr",
            "Draugr Overlord",
            "Draugr Wight",
            "Draugr Wight Lord",
            "Draugr Scourge",
            "Draugr Scourge Lord",
            "Hulking Draugr",
            "Draugr Deathlord",
            "Draugr Death Overlord",
            "Ghost",
            "Keeper",
            "Skeleton",
            "Corrupted Shade",
            "Boneman",
            "Mistman",
            "Wrathman",
        ]

    @functools.cached_property
    def enemies_anniversary(self) -> List[str]:
        return [
            "Ash Zombie",
            "Goblin",
            "Blooming Spriggan",
            "Blooming Spriggan Matron",
            "Ayleid Lich",
            "Bone Wolf",
            "Wight",
            "Bone Wolf",
            "Zombie",
            "Malignant Zombie",
            "Foul Zombie",
            "Putrid Zombie",
            "Relentless Zombie",
            "Dread Zombie",
        ]

    def enemies(self) -> List[str]:
        enemies: List[str] = self.enemies_base[:]

        if self.has_anniversary_upgrade:
            enemies.extend(self.enemies_anniversary)

        return sorted(enemies)

    @staticmethod
    def locations_clearable() -> List[str]:
        return [
            "Abandoned Prison",
            "Alftand",
            "Altar of Thrond",
            "Ancient's Ascent",
            "Angarvunde",
            "Ansilvund",
            "Arcwind Point",
            "Arkngthamz",
            "Ashfallow Citadel",
            "Autumnshade Clearing",
            "Autumnwatch Tower",
            "Avanchnzel",
            "Bannermist Tower",
            "Beast Stone",
            "Benkongerike",
            "Bilegulch Mine",
            "Bleak Falls Barrow (place)",
            "Bleakcoast Cave",
            "Bleakwind Basin",
            "Bleakwind Bluff",
            "Blind Cliff Cave",
            "Blizzard Rest",
            "Bloated Man's Grotto",
            "Bloodlet Throne",
            "Bloodskal Barrow",
            "Bonechill Passage",
            "Bonestrewn Crest",
            "Boulderfall Cave",
            "Bristleback Cave",
            "Brittleshin Pass",
            "Brodir Grove",
            "Broken Fang Cave",
            "Broken Helm Hollow",
            "Broken Limb Camp",
            "Broken Oar Grotto",
            "Broken Tower Redoubt",
            "Broken Tusk Mine",
            "Bronze Water Cave",
            "Brood Cavern",
            "Bruca's Leap Redoubt",
            "Bthardamz",
            "Castle Karstaag Caverns",
            "Castle Karstaag Ruins",
            "Chillwind Depths",
            "Clearpine Pond",
            "Clearspring Tarn",
            "Cold Rock Pass",
            "Coldcinder Cave",
            "Cracked Tusk Keep",
            "Cradle Stone Tower",
            "Cradlecrush Rock",
            "Cragslane Cavern",
            "Cragwallow Slope",
            "Cronvangr Cave",
            "Crystaldrift Cave",
            "Dainty Sload",
            "Damphall Mine",
            "Darklight Tower",
            "Darkshade",
            "Darkwater Pass",
            "Dead Crone Rock",
            "Dead Men's Respite",
            "Deepwood Redoubt",
            "Dimhollow Crypt",
            "Dragon Bridge Overlook",
            "Dragontooth Crater",
            "Drelas' Cottage",
            "Driftshade Refuge",
            "Druadach Redoubt",
            "Duskglow Crevice",
            "Dustman's Cairn",
            "Earth Stone",
            "Eldersblood Peak",
            "Embershard Mine",
            "Evergreen Grove",
            "Fahlbtharz",
            "Faldar's Tooth",
            "Falkreath Watchtower",
            "Fallowstone Cave",
            "Fellglow Keep",
            "Folgunthur",
            "Forelhost",
            "Forsaken Cave",
            "Fort Fellhammer",
            "Fort Frostmoth",
            "Four Skull Lookout",
            "Frossel",
            "Frostflow Lighthouse",
            "Frostmere Crypt",
            "Frostmoon Crag",
            "Gallows Rock",
            "Geirmund's Hall",
            "Giant's Grove",
            "Glacial Cave",
            "Glenmoril Coven",
            "Gloomreach",
            "Graywinter Watch",
            "Greenspring Hollow",
            "Greywater Grotto",
            "Guldun Rock",
            "Gyldenhul Barrow",
            "Haemar's Shame",
            "Hag Rock Redoubt",
            "Hag's End",
            "Haknir's Shoal",
            "Hall of the Vigilant",
            "Halldir's Cairn",
            "Halted Stream Camp",
            "Hamvir's Rest",
            "Harmugstahl",
            "Headwaters of Harstrad",
            "High Gate Ruins",
            "Highpoint Tower",
            "Hillgrund's Tomb",
            "Hob's Fall Cave",
            "Honeystrand Cave",
            "Horker Island",
            "Hrodulf's House",
            "Ilinalta's Deep",
            "Ironback Hideout",
            "Ironbind Barrow",
            "Journeyman's Nook",
            "Kagrenzel",
            "Kagrumez",
            "The Katariah",
            "Knifepoint Ridge",
            "Kolbjorn Barrow",
            "Labyrinthian",
            "Liar's Retreat",
            "Lost Echo Cave",
            "Lost Knife Hideout",
            "Lost Tongue Overlook",
            "Lost Valkygg",
            "Lost Valley Redoubt",
            "Mara's Eye Den",
            "Mara's Eye Pond",
            "Mistwatch",
            "Moesring Pass",
            "Moldering Ruins",
            "Morvunskar",
            "Moss Mother Cavern",
            "Mount Anthor",
            "Movarth's Lair",
            "Mzinchaleft",
            "Mzulft",
            "Nchardak",
            "Nchuand-Zel",
            "Nilheim",
            "Northwatch Keep",
            "Northwind Mine",
            "Northwind Summit",
            "Orotheim",
            "Orphan Rock",
            "Orphan's Tear",
            "Peak's Shade Tower",
            "Pinefrost Tower",
            "Pinemoon Cave",
            "Pinepeak Cavern",
            "Pinewatch",
            "Ragnvald",
            "Raldbthar",
            "Rannveig's Fast",
            "Raven Rock Mine",
            "Ravenscar Hollow",
            "Reachcliff Cave",
            "Reachwater Rock",
            "Rebel's Cairn",
            "Red Eagle Redoubt",
            "Red Road Pass",
            "Redoran's Retreat",
            "Redwater Den",
            "Refugees' Rest",
            "Rift Watchtower",
            "Rimerock Burrow",
            "Riverside Shack",
            "Roadside Ruins",
            "Robber's Gorge",
            "Ruins of Bthalft",
            "Ruins of Rkund",
            "Saarthal",
            "Saering's Watch",
            "Secunda's Kiss",
            "Serpent's Bluff Redoubt",
            "Shadowgreen Cavern",
            "Shalidor's Maze",
            "Shearpoint",
            "Shimmermist Cave",
            "Shriekwind Bastion",
            "Shroud Hearth Barrow",
            "Shrouded Grove",
            "Sightless Pit",
            "Silent Moons Camp",
            "Silverdrift Lair",
            "Skuldafn",
            "Skyborn Altar",
            "Skybound Watch Pass",
            "Skytemple Ruins",
            "Sleeping Tree Camp",
            "Snapleg Cave",
            "Snow Veil Sanctum",
            "Snowclad Ruins",
            "Snowpoint Beacon",
            "Soljund's Sinkhole",
            "Southfringe Sanctum",
            "Steamcrag Camp",
            "Steepfall Burrow",
            "Stendarr's Beacon",
            "Stillborn Cave",
            "Stonehill Bluff",
            "Stony Creek Cave",
            "Sun Stone",
            "Sundered Towers",
            "Sunderstone Gorge",
            "Swindler's Den",
            "Talking Stone Camp",
            "Temple of Miraak",
            "Tolvald's Cave",
            "Traitor's Post",
            "Treva's Watch",
            "Tumble Arch Pass",
            "Uttering Hills Cave",
            "Vahlok's Tomb",
            "Valtheim Towers",
            "Valthume",
            "Volskygge",
            "Volunruud",
            "Water Stone",
            "Weynon Stones",
            "White Ridge Barrow",
            "White River Watch",
            "Widow's Watch Ruins",
            "Wind Stone",
            "Windward Ruins",
            "Wolfskull Cave",
            "Wreck Of The Brinehammer",
            "Wreck of The Pride of Tel Vos",
            "Wreck of the Strident Squall",
            "Wreck of the Winter War",
            "Yngol Barrow",
            "Yngvild",
            "Yorgrim Overlook",
            "Ysgramor's Tomb",
        ]

    @staticmethod
    def standing_stones() -> List[str]:
        return [
            "The Apprentice Stone",
            "The Atronach Stone",
            "The Lady Stone",
            "The Lord Stone",
            "The Lover Stone",
            "The Mage Stone",
            "The Ritual Stone",
            "The Serpent Stone",
            "The Shadow Stone",
            "The Steed Stone",
            "The Thief Stone",
            "The Tower Stone",
            "The Warrior Stone",
        ]

    @staticmethod
    def merchant_actions() -> List[str]:
        return [
            "Purchase an item from",
            "Sell an item to",
        ]

    @staticmethod
    def merchants() -> List[str]:
        return [
            "Addvar",
            "Adrianne Avenicci",
            "Ahkari",
            "Alvor",
            "Ambarys Rendar",
            "Angeline Morrard",
            "Anoriath",
            "Anton Virane",
            "Arcadia",
            "Arnskar Ember-Master",
            "Atahbah",
            "Aval Atheron",
            "Babette",
            "Baldor Iron-Shaper",
            "Balimund",
            "Beirand",
            "Belethor",
            "Bersi Honey-Hand",
            "Birna",
            "Bolar",
            "Bothela",
            "Brand-Shei",
            "Calcelmo",
            "Carlotta Valentia",
            "Colette Marence",
            "Corpulus Vinius",
            "Dagur",
            "Dremora Merchant",
            "Drevis Neloren",
            "Dushnamub",
            "Edla",
            "Elda Early-Dawn",
            "Elgrim",
            "Elrindir",
            "Elynea Mothren",
            "Endarie",
            "Endon",
            "Enthir",
            "Eorlund Gray-Mane",
            "Evette San",
            "Eydis",
            "Faida",
            "Falas Selvayn",
            "Falion",
            "Faralda",
            "Farengar Secret-Fire",
            "Feran Sadri",
            "Fethis Alor",
            "Fihada",
            "Filnjar",
            "Florentius Baenius",
            "Fralia Gray-Mane",
            "Frida",
            "Garyn Ienth",
            "Geldis Sadri",
            "Gharol",
            "Ghorza gra-Bagol",
            "Glover Mallory",
            "Grelka",
            "Gulum-Ei",
            "Gunmar",
            "Hadring",
            "Halbarn Iron-Fur",
            "Herluin Lothaire",
            "Hestla",
            "Hillevi Cruel-Sea",
            "Hogni Red-Arm",
            "Hulda",
            "Iddra",
            "Jala",
            "Jonna",
            "Keerava",
            "Kerah",
            "Kleppr",
            "Lami",
            "Lisbet",
            "Lod",
            "Lucan Valerius",
            "Ma'dran",
            "Ma'jhad",
            "Madena",
            "Madesi",
            "Mallus Maccius",
            "Marise Aravel",
            "Milore Ienth",
            "Moth gro-Bagol",
            "Mralki",
            "Murbul",
            "Nelacar",
            "Neloth",
            "Niranye",
            "Nurelion",
            "Oengul War-Anvil",
            "Orgnar",
            "Phinis Gestor",
            "Revus Sarvani",
            "Revyn Sadri",
            "Ri'saad",
            "Ronthil",
            "Rustleif",
            "Sabjorn",
            "Sayma",
            "Sharamph",
            "Shuftharz",
            "Solaf",
            "Sorine Jurard",
            "Sybille Stentor",
            "Syndus",
            "Talvas Fathryon",
            "Thoring",
            "Tolfdir",
            "Tonilia",
            "Ungrien",
            "Urag gro-Shub",
            "Valga Vinicia",
            "Vanryth Gatharian",
            "Vekel the Man",
            "Wilhelm",
            "Wuunferth the Unliving",
            "Wylandriah",
            "Zaria",
            "Zaynabi",
        ]

    @staticmethod
    def trainers() -> List[str]:
        return [
            "Aela the Huntress",
            "Amren",
            "Aphia Velothi",
            "Arcadia",
            "Athis",
            "Atub",
            "Babette",
            "Balimund",
            "Chief Burguk",
            "Chief Larak",
            "Colette Marence",
            "Danica Pure-Spring",
            "Delvin Mallory",
            "Dravynea the Stoneweaver",
            "Drevis Neloren",
            "Dro'marash",
            "Eorlund Gray-Mane",
            "Faendal",
            "Falion",
            "Faralda",
            "Farkas",
            "Florentius Baenius",
            "Fura Bloodmouth",
            "Garvey",
            "Gharol",
            "Ghorza",
            "Giraud Gemane",
            "Grelka",
            "Gunmar",
            "Hamal",
            "Isran",
            "Keeper Carcette",
            "Khayla",
            "Kuvar",
            "Lami",
            "Ma'jhad",
            "Milore Ienth",
            "Nazir",
            "Neloth",
            "Niruin",
            "Njada Stonearm",
            "Ogmund the Skald",
            "Phinis Gestor",
            "Revyn Sadri",
            "Ronthil",
            "Runil",
            "Scouts-Many-Marshes",
            "Sergius Turrianus",
            "Silda the Unseen",
            "Sorine Jurard",
            "Sybille Stentor",
            "Talvas Fathryon",
            "Tolfdir",
            "Torbjorn Shatter-Shield",
            "Vex",
            "Vilkas",
            "Vipir the Fleet",
            "Wulf Wild-Blood",
            "Wuunferth the Unliving"
        ]

    @functools.cached_property
    def mounts_base(self) -> List[str]:
        return [
            "Piebald Horse",
            "Dapple Grey Horse",
            "Palomino Horse",
            "Black Horse",
            "Bay Horse",
            "Shadowmere",
            "Frost",
            "Arvak",
        ]

    @functools.cached_property
    def mounts_anniversary(self) -> List[str]:
        return [
            "Red Horse",
            "Dapple Brown Horse",
            "White Spotted Horse",
            "Pale Mare",
            "Grey Spotted Horse",
            "Black Horse",
            "Chestnut Horse",
            "Unicorn",
            "Dwarven Horse",
            "Reindeer",
            "Daedric Horse",
        ]

    def mounts(self) -> List[str]:
        mounts: List[str] = self.mounts_base[:]

        if self.has_anniversary_upgrade:
            mounts.extend(self.mounts_anniversary)

        return sorted(mounts)

    @functools.cached_property
    def growables_base(self) -> List[str]:
        return [
            "Aloe Vera Leaves",
            "Bleeding Crown",
            "Blisterwort",
            "Blue Mountain Flower",
            "Canis Root",
            "Creep Cluster",
            "Deathbell",
            "Dragon's Tongue",
            "Fly Amanita",
            "Giant Lichen",
            "Glowing Mushroom",
            "Grass Pod",
            "Imp Stool",
            "Jazbay Grapes",
            "Juniper Berries",
            "Lavender",
            "Mora Tapinella",
            "Namira's Rot",
            "Nightshade",
            "Purple Mountain Flower",
            "Red Mountain Flower",
            "Scaly Pholiota",
            "Snowberries",
            "Swamp Fungal Pod",
            "Thistle Branch",
            "Tundra Cotton",
            "Wheat",
            "White Cap",
        ]

    @functools.cached_property
    def growables_anniversary(self) -> List[str]:
        return [
            "Cabbage",
            "Carrot",
            "Gourd",
            "Leek",
            "Potato",
            "Steel-Blue Entoloma",
        ]

    def growables(self) -> List[str]:
        growables: List[str] = self.growables_base[:]

        if self.has_anniversary_upgrade:
            growables.extend(self.growables_anniversary)

        return sorted(growables)

    @staticmethod
    def pets() -> List[str]:
        return [
            "Arachnia",
            "Bone Wolf",
            "Demented Elytra Nymph",
            "Dwarven Mudcrab",
            "Hilda",
            "Manic Elytra Nymph",
            "Nix-Hound",
            "Skritch",
            "Sweet Roll",
            "Thistle",
        ]


# Archipelago Options
class TheElderScrollsVSkyrimSpecialEditionDLCOwned(OptionSet):
    """
    Indicates which The Elder Scrolls V: Skyrim - Special Edition DLC the player owns, if any.
    """

    display_name = "The Elder Scrolls V: Skyrim - Special Edition DLC Owned"
    valid_keys = [
        "Anniversary Upgrade",
    ]

    default = valid_keys
